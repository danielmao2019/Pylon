# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
from torch.optim.adam import Adam
from torch.optim.lr_scheduler import StepLR
from criteria.vision_3d.point_cloud_registration.parenet_criterion.parenet_criterion import PARENetCriterion
from data.dataloaders.parenet_dataloader import PARENetDataloader
from data.datasets.pcr_datasets.modelnet40_dataset import ModelNet40Dataset
from data.transforms.compose import Compose
from data.transforms.vision_3d.clamp import Clamp
from metrics.vision_3d.point_cloud_registration.parenet_metric.parenet_metric import PARENetMetric
from models.point_cloud_registration.parenet.parenet_model import PARENetModel
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.trainers.supervised_single_task_trainer import SupervisedSingleTaskTrainer


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/point_cloud_registration/modelnet40/PARENet_run_2',
    'epochs': 100,
    'init_seed': 90193146,
    'train_seeds': [24593157, 57234105, 3435183, 93353383, 19943159, 16612726, 94624514, 18278375, 21003423, 53287187, 83742247, 13007620, 79355865, 70042990, 87899081, 66268312, 55231741, 23851074, 98526434, 71092428, 72834321, 15096551, 71212594, 69976448, 5203665, 86083770, 42808193, 28153562, 89417100, 83216056, 86417722, 35066592, 62907677, 88056587, 72069167, 55044871, 87245714, 12570375, 5662876, 51214624, 5786534, 23840963, 71317009, 44897599, 24037681, 66391970, 24769092, 71727715, 64161261, 14314037, 2058493, 56890392, 74876707, 24241398, 97357924, 88926918, 99417467, 80305112, 42673077, 21514021, 74837702, 8826118, 64644741, 7943623, 32264996, 39982463, 83813689, 20735812, 28668227, 58677186, 76035599, 18174419, 98936895, 37270546, 51762912, 20243139, 90616065, 22013564, 15636519, 42066069, 88129949, 62816328, 86447437, 81094631, 14906359, 71565611, 98128524, 94049414, 93103972, 74655900, 42645764, 78371969, 4538496, 60772376, 37284015, 21174949, 7686611, 32253688, 58529978, 15457790],
    'val_seeds': [41602214, 47452964, 94791109, 83585153, 6515362, 70198654, 44156419, 27853154, 95814539, 84927428, 99958506, 64633241, 81667167, 92365972, 56576116, 8179537, 338720, 85923112, 45753563, 93689914, 59025304, 75042677, 32346884, 89667220, 50012386, 97317298, 87439702, 33588885, 19750259, 91677250, 91469945, 2337394, 83679955, 17630196, 93275100, 45411671, 26872267, 37215490, 38935417, 78673254, 52695391, 84621368, 32085705, 1715800, 63052066, 13071913, 59596696, 34709704, 94810551, 76374240, 99395752, 27520324, 25909943, 50823283, 45188096, 80471919, 18096656, 24901094, 11757134, 42397555, 91081256, 24788408, 37160031, 52180293, 49258679, 22529204, 49154726, 67216314, 34035285, 29893272, 21863843, 40597058, 26508387, 64754130, 69899198, 16526904, 29942726, 4892032, 63296830, 59752590, 43432059, 51108522, 54810515, 89887522, 30290525, 83340583, 41283613, 30702489, 39773081, 298049, 89225354, 35786508, 41451838, 5578773, 1451623, 89473051, 65753449, 82386640, 92739468, 17488667],
    'test_seed': 56008538,
    'train_dataset': {
        'class': ModelNet40Dataset,
        'args': {
            'data_root': 'data/datasets/soft_links/ModelNet40',
            'split': 'train',
            'dataset_size': 50,
            'rotation_mag': 45.0,
            'translation_mag': 0.5,
            'matching_radius': 0.05,
            'overlap_range': (0.3, 1.0),
            'min_points': 512,
            'cache_filepath': 'data/datasets/soft_links/ModelNet40/../ModelNet40_cache.json',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [{
    'op': {
        'class': Clamp,
        'args': {
            'max_points': 4096,
        },
    },
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc')],
}],
                },
            },
        },
    },
    'train_dataloader': {
        'class': PARENetDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': True,
            'num_stages': 4,
            'voxel_size': 0.05,
            'subsample_ratio': 4.0,
            'num_neighbors': [32, 32, 32, 32],
            'precompute_data': True,
        },
    },
    'criterion': {
        'class': PARENetCriterion,
        'args': {
            'coarse_positive_margin': 0.1,
            'coarse_negative_margin': 1.4,
            'coarse_positive_optimal': 0.1,
            'coarse_negative_optimal': 1.4,
            'coarse_log_scale': 10.0,
            'coarse_positive_overlap': 0.1,
            'fine_positive_radius': 0.1,
            'fine_negative_radius': 0.1,
            'fine_positive_margin': 0.05,
            'fine_negative_margin': 0.2,
            'weight_coarse_loss': 1.0,
            'weight_fine_ri_loss': 1.0,
            'weight_fine_re_loss': 1.0,
        },
    },
    'val_dataset': {
        'class': ModelNet40Dataset,
        'args': {
            'data_root': 'data/datasets/soft_links/ModelNet40',
            'split': 'test',
            'dataset_size': 500,
            'rotation_mag': 45.0,
            'translation_mag': 0.5,
            'matching_radius': 0.05,
            'overlap_range': (0.3, 1.0),
            'min_points': 512,
            'cache_filepath': 'data/datasets/soft_links/ModelNet40/../ModelNet40_cache.json',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [{
    'op': {
        'class': Clamp,
        'args': {
            'max_points': 4096,
        },
    },
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc')],
}],
                },
            },
        },
    },
    'val_dataloader': {
        'class': PARENetDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': False,
            'num_stages': 4,
            'voxel_size': 0.05,
            'subsample_ratio': 4.0,
            'num_neighbors': [32, 32, 32, 32],
            'precompute_data': True,
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': PARENetMetric,
        'args': {
            'inlier_threshold': 0.1,
            'acceptance_overlap': 0.1,
            'acceptance_radius': 0.1,
            'rmse_threshold': 0.2,
            'feat_rre_threshold': 30.0,
        },
    },
    'model': {
        'class': PARENetModel,
        'args': {
            'num_points_in_patch': 32,
            'ground_truth_matching_radius': 0.05,
            'backbone_init_dim': 96,
            'backbone_output_dim': 256,
            'backbone_kernel_size': 4,
            'backbone_share_nonlinearity': False,
            'backbone_conv_way': 'edge_conv',
            'backbone_use_xyz': True,
            'use_encoder_re_feats': True,
            'geotransformer_input_dim': 768,
            'geotransformer_output_dim': 128,
            'geotransformer_hidden_dim': 96,
            'geotransformer_num_heads': 4,
            'geotransformer_blocks': ['self', 'cross', 'self', 'cross', 'self', 'cross'],
            'geotransformer_sigma_d': 4.8,
            'geotransformer_sigma_a': 15,
            'geotransformer_angle_k': 3,
            'geotransformer_reduction_a': 'max',
            'coarse_matching_num_targets': 128,
            'coarse_matching_overlap_threshold': 0.1,
            'coarse_matching_num_correspondences': 256,
            'coarse_matching_dual_normalization': True,
            'fine_matching_topk': 2,
            'fine_matching_acceptance_radius': 0.6,
            'fine_matching_confidence_threshold': 0.005,
            'fine_matching_num_hypotheses': 1000,
            'fine_matching_num_refinement_steps': 5,
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': Adam,
                'args': {
                    'params': None,
                    'lr': 0.001,
                    'weight_decay': 1e-06,
                },
            },
        },
    },
    'scheduler': {
        'class': StepLR,
        'args': {
            'optimizer': None,
            'step_size': 1000.0,
            'gamma': 0.95,
        },
    },
}
