# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
from torch.optim.adam import Adam
from torch.optim.lr_scheduler import StepLR
from criteria.vision_3d.point_cloud_registration.geotransformer_criterion.geotransformer_criterion import GeoTransformerCriterion
from data.dataloaders.geotransformer_dataloader import GeoTransformerDataloader
from data.datasets.pcr_datasets.threedmatch_dataset import ThreeDLoMatchDataset
from data.transforms.compose import Compose
from data.transforms.vision_3d.gaussian_pos_noise import GaussianPosNoise
from data.transforms.vision_3d.random_rigid_transform import RandomRigidTransform
from metrics.vision_3d.point_cloud_registration.geotransformer_metric.geotransformer_metric import GeoTransformerMetric
from models.point_cloud_registration.geotransformer.geotransformer import GeoTransformer
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.supervised_single_task_trainer import SupervisedSingleTaskTrainer
from utils.point_cloud_ops.random_select import RandomSelect


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/point_cloud_registration/threedlomatch/GeoTransformer_run_1',
    'epochs': 100,
    'init_seed': 8092275,
    'train_seeds': [26000968, 38698764, 4364347, 11110569, 67845710, 81901596, 23097421, 52923886, 79413131, 24539976, 48522117, 40032258, 76153487, 56189609, 44052365, 62635364, 51221139, 3153893, 87213005, 75654952, 99256153, 318285, 9609654, 7556713, 38667004, 2024703, 14659902, 43329368, 5405640, 54111869, 95582394, 81851227, 99407497, 26906288, 51204109, 63555033, 63852675, 45038395, 95795049, 6584293, 70695290, 12530444, 64164734, 56041214, 28179359, 701319, 87557997, 65328931, 39181903, 58365142, 78832349, 80456338, 90002626, 10615027, 51303032, 83400431, 49896371, 10799553, 41197329, 50726387, 9830823, 59821950, 93557067, 60197546, 40992663, 12714250, 39851147, 80328252, 88946247, 36997635, 94664007, 94402432, 6090493, 96119770, 86879477, 194235, 67918400, 34754639, 91811194, 13660353, 68263868, 57245937, 66150409, 79834352, 26055291, 98058906, 78952891, 14387988, 58832096, 96089503, 85290810, 9822289, 58584237, 86425065, 94047886, 83627422, 7234904, 52818237, 18627925, 87392418],
    'val_seeds': [97437467, 96049271, 23821998, 91295574, 10237846, 33562089, 18432654, 38566741, 46154740, 32731953, 9725684, 42445091, 95866892, 79037959, 92753442, 26728976, 1131446, 52626424, 10631733, 49138867, 25311049, 75745395, 82051272, 37511209, 42009098, 1035574, 61358258, 35830545, 877610, 90638916, 23847559, 24281502, 66543892, 76485691, 83845019, 88308453, 92750104, 13474410, 77462782, 24171038, 2267278, 70755233, 58500454, 88754623, 2550540, 94647397, 19932946, 63797261, 60643863, 34367524, 64362103, 47634986, 18346212, 54110163, 45275495, 46816485, 10920917, 10078348, 83297758, 97702968, 21328199, 3388446, 47549485, 9457627, 62099936, 67853989, 44583245, 42943616, 47584458, 66652768, 19485517, 78718207, 78176203, 20786153, 75133632, 98614788, 82844292, 42687782, 42422144, 68282529, 94362269, 6144978, 46856440, 83741904, 52889084, 77171125, 26320428, 64712028, 30111840, 90459092, 14430839, 63635841, 80672048, 14350820, 19408816, 48017258, 8323360, 42764854, 45329257, 98218574],
    'test_seed': 19500107,
    'train_dataset': {
        'class': ThreeDLoMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'train',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
), (
    {
            'class': RandomRigidTransform,
            'args': {
                'rot_mag': 45.0,
                'trans_mag': 0.5,
                'method': 'Rodrigues',
            },
        },
    [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'tgt_pc')]
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': True,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'criterion': {
        'class': GeoTransformerCriterion,
        'args': {
            'loss': {
                'weight_coarse_loss': 1.0,
                'weight_fine_loss': 1.0,
            },
            'coarse_loss': {
                'positive_margin': 0.1,
                'negative_margin': 1.4,
                'positive_optimal': 0.1,
                'negative_optimal': 1.4,
                'log_scale': 24,
                'positive_overlap': 0.1,
            },
            'fine_loss': {
                'positive_radius': 0.05,
            },
        },
    },
    'val_dataset': {
        'class': ThreeDLoMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'val',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
)],
                },
            },
        },
    },
    'val_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': False,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': GeoTransformerMetric,
        'args': {
            'acceptance_overlap': 0.0,
            'acceptance_radius': 0.1,
            'inlier_ratio_threshold': 0.05,
            'rmse_threshold': 0.2,
            'rre_threshold': 15.0,
            'rte_threshold': 0.3,
        },
    },
    'model': {
        'class': GeoTransformer,
        'args': {
            'model': {
                'ground_truth_matching_radius': 0.05,
                'num_points_in_patch': 32,
                'num_sinkhorn_iterations': 100,
            },
            'backbone': {
                'num_stages': 4,
                'init_voxel_size': 0.025,
                'kernel_size': 15,
                'base_radius': 2.5,
                'base_sigma': 2.0,
                'init_radius': 0.0625,
                'init_sigma': 0.05,
                'group_norm': 32,
                'input_dim': 1,
                'init_dim': 64,
                'output_dim': 256,
            },
            'geotransformer': {
                'input_dim': 1024,
                'hidden_dim': 256,
                'output_dim': 256,
                'num_heads': 4,
                'blocks': ['self', 'cross', 'self', 'cross', 'self', 'cross'],
                'sigma_d': 0.2,
                'sigma_a': 15,
                'angle_k': 3,
                'reduction_a': 'max',
            },
            'coarse_matching': {
                'num_targets': 128,
                'overlap_threshold': 0.1,
                'num_correspondences': 256,
                'dual_normalization': True,
            },
            'fine_matching': {
                'topk': 3,
                'acceptance_radius': 0.1,
                'mutual': True,
                'confidence_threshold': 0.05,
                'use_dustbin': False,
                'use_global_score': False,
                'correspondence_threshold': 3,
                'correspondence_limit': None,
                'num_refinement_steps': 5,
            },
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': Adam,
                'args': {
                    'params': None,
                    'lr': 0.001,
                    'weight_decay': 1e-06,
                },
            },
        },
    },
    'scheduler': {
        'class': StepLR,
        'args': {
            'optimizer': None,
            'step_size': 1000.0,
            'gamma': 0.95,
        },
    },
}
