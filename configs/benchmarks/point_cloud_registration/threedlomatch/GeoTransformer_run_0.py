# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
from torch.optim.adam import Adam
from torch.optim.lr_scheduler import StepLR
from criteria.vision_3d.point_cloud_registration.geotransformer_criterion.geotransformer_criterion import GeoTransformerCriterion
from data.dataloaders.geotransformer_dataloader import GeoTransformerDataloader
from data.datasets.pcr_datasets.threedmatch_dataset import ThreeDLoMatchDataset
from data.transforms.compose import Compose
from data.transforms.vision_3d.gaussian_pos_noise import GaussianPosNoise
from data.transforms.vision_3d.random_rigid_transform import RandomRigidTransform
from metrics.vision_3d.point_cloud_registration.geotransformer_metric.geotransformer_metric import GeoTransformerMetric
from models.point_cloud_registration.geotransformer.geotransformer import GeoTransformer
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.supervised_single_task_trainer import SupervisedSingleTaskTrainer
from utils.point_cloud_ops.random_select import RandomSelect


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/point_cloud_registration/threedlomatch/GeoTransformer_run_0',
    'epochs': 100,
    'init_seed': 95492427,
    'train_seeds': [34044504, 86025674, 45944125, 8706897, 91358172, 25933945, 50263656, 22598463, 31949125, 3665450, 82296106, 70721670, 47462938, 79114821, 38972851, 81744634, 99112713, 51255069, 10087986, 90665748, 79309208, 46256369, 57492438, 20271530, 81155789, 82993978, 26546939, 93364430, 85680665, 481136, 18753014, 7587317, 31480396, 11487123, 97812365, 84596559, 40901451, 29911650, 9544393, 19824131, 35121588, 8860719, 82768672, 48926512, 68976590, 18763129, 45927392, 61323576, 89334959, 45971253, 99397666, 91609870, 76478451, 58210048, 77171511, 82254184, 16293655, 25682968, 78711388, 48882113, 85699260, 55083280, 35146568, 43041589, 81378742, 24675386, 23296334, 12329382, 13800899, 48590305, 86534937, 14106589, 86581729, 87134167, 62501131, 9859345, 30521318, 31712988, 40819804, 88653003, 2583749, 8127935, 10636493, 52341378, 53247722, 98236900, 34931894, 61501605, 75768594, 51721723, 85541962, 11516574, 68849181, 90080859, 33713590, 24127291, 93380191, 81924266, 49068525, 32094095],
    'val_seeds': [43267952, 15292695, 12684977, 23996179, 89910252, 45812189, 88027872, 2935596, 28303325, 10240163, 7594857, 84163576, 65521119, 5972162, 63813463, 63477470, 26291679, 24376607, 67090610, 94723684, 93805018, 94200795, 92176383, 64814401, 80825614, 20401832, 66714950, 77796409, 32405825, 18519591, 6010207, 22168491, 25666826, 800373, 22034575, 79397324, 11845851, 33676548, 3791355, 34967715, 99904134, 71846758, 8802724, 93530687, 10118705, 37277168, 77738519, 5651039, 6659362, 38713886, 40576328, 62309139, 81873352, 77105880, 49836628, 35809798, 20797783, 86443304, 89832037, 55444607, 53098540, 98652343, 27222146, 5853172, 79502992, 44596498, 93946448, 26502925, 23008296, 24885115, 46340857, 41493437, 39217981, 3203327, 33009569, 96010349, 93970457, 20430305, 48422074, 4174497, 84601447, 57309512, 2973945, 83428687, 11665152, 9112156, 55874550, 17889867, 30289232, 40681047, 76538128, 84589721, 4193292, 38721470, 26394963, 67156709, 57489892, 33230934, 45749737, 63772038],
    'test_seed': 65805308,
    'train_dataset': {
        'class': ThreeDLoMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'train',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
), (
    {
            'class': RandomRigidTransform,
            'args': {
                'rot_mag': 45.0,
                'trans_mag': 0.5,
                'method': 'Rodrigues',
            },
        },
    [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'tgt_pc')]
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': True,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'criterion': {
        'class': GeoTransformerCriterion,
        'args': {
            'loss': {
                'weight_coarse_loss': 1.0,
                'weight_fine_loss': 1.0,
            },
            'coarse_loss': {
                'positive_margin': 0.1,
                'negative_margin': 1.4,
                'positive_optimal': 0.1,
                'negative_optimal': 1.4,
                'log_scale': 24,
                'positive_overlap': 0.1,
            },
            'fine_loss': {
                'positive_radius': 0.05,
            },
        },
    },
    'val_dataset': {
        'class': ThreeDLoMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'val',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
)],
                },
            },
        },
    },
    'val_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': False,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': GeoTransformerMetric,
        'args': {
            'acceptance_overlap': 0.0,
            'acceptance_radius': 0.1,
            'inlier_ratio_threshold': 0.05,
            'rmse_threshold': 0.2,
            'rre_threshold': 15.0,
            'rte_threshold': 0.3,
        },
    },
    'model': {
        'class': GeoTransformer,
        'args': {
            'model': {
                'ground_truth_matching_radius': 0.05,
                'num_points_in_patch': 32,
                'num_sinkhorn_iterations': 100,
            },
            'backbone': {
                'num_stages': 4,
                'init_voxel_size': 0.025,
                'kernel_size': 15,
                'base_radius': 2.5,
                'base_sigma': 2.0,
                'init_radius': 0.0625,
                'init_sigma': 0.05,
                'group_norm': 32,
                'input_dim': 1,
                'init_dim': 64,
                'output_dim': 256,
            },
            'geotransformer': {
                'input_dim': 1024,
                'hidden_dim': 256,
                'output_dim': 256,
                'num_heads': 4,
                'blocks': ['self', 'cross', 'self', 'cross', 'self', 'cross'],
                'sigma_d': 0.2,
                'sigma_a': 15,
                'angle_k': 3,
                'reduction_a': 'max',
            },
            'coarse_matching': {
                'num_targets': 128,
                'overlap_threshold': 0.1,
                'num_correspondences': 256,
                'dual_normalization': True,
            },
            'fine_matching': {
                'topk': 3,
                'acceptance_radius': 0.1,
                'mutual': True,
                'confidence_threshold': 0.05,
                'use_dustbin': False,
                'use_global_score': False,
                'correspondence_threshold': 3,
                'correspondence_limit': None,
                'num_refinement_steps': 5,
            },
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': Adam,
                'args': {
                    'params': None,
                    'lr': 0.001,
                    'weight_decay': 1e-06,
                },
            },
        },
    },
    'scheduler': {
        'class': StepLR,
        'args': {
            'optimizer': None,
            'step_size': 1000.0,
            'gamma': 0.95,
        },
    },
}
