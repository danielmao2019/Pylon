# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
from torch.optim.adam import Adam
from torch.optim.lr_scheduler import StepLR
from criteria.vision_3d.point_cloud_registration.parenet_criterion.parenet_criterion import PARENetCriterion
from data.dataloaders.parenet_dataloader import PARENetDataloader
from data.datasets.pcr_datasets.threedmatch_dataset import ThreeDLoMatchDataset
from data.transforms.compose import Compose
from data.transforms.vision_3d.gaussian_pos_noise import GaussianPosNoise
from data.transforms.vision_3d.random_rigid_transform import RandomRigidTransform
from metrics.vision_3d.point_cloud_registration.parenet_metric.parenet_metric import PARENetMetric
from models.point_cloud_registration.parenet.parenet_model import PARENetModel
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.trainers.supervised_single_task_trainer import SupervisedSingleTaskTrainer
from utils.point_cloud_ops.random_select import RandomSelect


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/point_cloud_registration/threedlomatch/PARENet_run_2',
    'epochs': 100,
    'init_seed': 42542717,
    'train_seeds': [71250714, 31513219, 12165440, 20120163, 76118999, 6101019, 74626583, 84373542, 51326252, 63027203, 19213620, 2241583, 61395144, 14603236, 37132476, 26960098, 77337411, 30709805, 82147091, 37780743, 40608812, 17219601, 81215799, 31687701, 93690944, 17963985, 85262128, 84949137, 86227153, 45290505, 66193196, 55434542, 91256325, 63793197, 21506857, 29381178, 37108018, 19388184, 37270172, 54932759, 98329260, 36351176, 37086518, 394572, 12122121, 30221883, 58947292, 29591809, 17016163, 38972504, 41787760, 18834493, 826106, 35446103, 34188365, 5923255, 81042690, 36074350, 715255, 89373755, 23046573, 96461346, 47295772, 37004206, 81948166, 33284663, 19472974, 75275664, 41698298, 49894733, 80034630, 7468959, 51492435, 76638209, 91835563, 45800633, 13589259, 98630144, 66876908, 23565978, 87094433, 78109639, 28896371, 37265935, 50904980, 9574602, 44607753, 49451241, 77148198, 58417048, 45285996, 31269709, 5396234, 36740961, 42219023, 8657306, 85639944, 3144561, 53134549, 39429726],
    'val_seeds': [68262049, 80941342, 25456799, 19361342, 90521034, 22636038, 82080855, 73937311, 22181222, 39308185, 6547489, 50192776, 61512252, 61792313, 82962422, 9625298, 61182803, 14369519, 61409245, 31136185, 38193788, 30646160, 73242756, 34616340, 584021, 7653967, 3770189, 24238818, 87198371, 80199094, 19471546, 14718055, 2593026, 75831300, 66506800, 59668010, 39561049, 67724608, 49619000, 75673505, 59108551, 37860435, 6104233, 78682817, 2369357, 15640655, 1095508, 58397249, 31523130, 38197855, 80014780, 82810389, 69659070, 70245272, 33364752, 23908509, 73598096, 13335880, 7629706, 35635481, 66210354, 97161082, 78064487, 13467387, 26543121, 45017913, 38828233, 21164555, 8966764, 91109418, 54543551, 23212386, 14170715, 26944253, 1367435, 1332741, 20506262, 92053735, 77827551, 36595119, 59550988, 86108961, 13484298, 89286235, 55900809, 19852010, 98323241, 5319426, 2480417, 85856756, 387640, 52544455, 66336946, 63305347, 53958006, 35624357, 82940564, 40741416, 27731816, 71530745],
    'test_seed': 19868214,
    'train_dataset': {
        'class': ThreeDLoMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'train',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
), (
    {
            'class': RandomRigidTransform,
            'args': {
                'rot_mag': 45.0,
                'trans_mag': 0.5,
                'method': 'Rodrigues',
            },
        },
    [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'tgt_pc')]
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': PARENetDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': True,
            'num_stages': 4,
            'voxel_size': 0.05,
            'subsample_ratio': 4.0,
            'num_neighbors': [32, 32, 32, 32],
            'precompute_data': True,
        },
    },
    'criterion': {
        'class': PARENetCriterion,
        'args': {
            'coarse_positive_margin': 0.1,
            'coarse_negative_margin': 1.4,
            'coarse_positive_optimal': 0.1,
            'coarse_negative_optimal': 1.4,
            'coarse_log_scale': 10.0,
            'coarse_positive_overlap': 0.1,
            'fine_positive_radius': 0.1,
            'fine_negative_radius': 0.1,
            'fine_positive_margin': 0.05,
            'fine_negative_margin': 0.2,
            'weight_coarse_loss': 1.0,
            'weight_fine_ri_loss': 1.0,
            'weight_fine_re_loss': 1.0,
        },
    },
    'val_dataset': {
        'class': ThreeDLoMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'val',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
)],
                },
            },
        },
    },
    'val_dataloader': {
        'class': PARENetDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': False,
            'num_stages': 4,
            'voxel_size': 0.05,
            'subsample_ratio': 4.0,
            'num_neighbors': [32, 32, 32, 32],
            'precompute_data': True,
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': PARENetMetric,
        'args': {
            'inlier_threshold': 0.1,
            'acceptance_overlap': 0.1,
            'acceptance_radius': 0.1,
            'rmse_threshold': 0.2,
            'feat_rre_threshold': 30.0,
        },
    },
    'model': {
        'class': PARENetModel,
        'args': {
            'num_points_in_patch': 32,
            'ground_truth_matching_radius': 0.05,
            'backbone_init_dim': 96,
            'backbone_output_dim': 256,
            'backbone_kernel_size': 4,
            'backbone_share_nonlinearity': False,
            'backbone_conv_way': 'edge_conv',
            'backbone_use_xyz': True,
            'use_encoder_re_feats': True,
            'geotransformer_input_dim': 768,
            'geotransformer_output_dim': 128,
            'geotransformer_hidden_dim': 96,
            'geotransformer_num_heads': 4,
            'geotransformer_blocks': ['self', 'cross', 'self', 'cross', 'self', 'cross'],
            'geotransformer_sigma_d': 4.8,
            'geotransformer_sigma_a': 15,
            'geotransformer_angle_k': 3,
            'geotransformer_reduction_a': 'max',
            'coarse_matching_num_targets': 128,
            'coarse_matching_overlap_threshold': 0.1,
            'coarse_matching_num_correspondences': 256,
            'coarse_matching_dual_normalization': True,
            'fine_matching_topk': 2,
            'fine_matching_acceptance_radius': 0.6,
            'fine_matching_confidence_threshold': 0.005,
            'fine_matching_num_hypotheses': 1000,
            'fine_matching_num_refinement_steps': 5,
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': Adam,
                'args': {
                    'params': None,
                    'lr': 0.001,
                    'weight_decay': 1e-06,
                },
            },
        },
    },
    'scheduler': {
        'class': StepLR,
        'args': {
            'optimizer': None,
            'step_size': 1000.0,
            'gamma': 0.95,
        },
    },
}
