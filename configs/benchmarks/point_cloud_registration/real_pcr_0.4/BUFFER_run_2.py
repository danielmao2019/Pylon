# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
import torch
import criteria
import metrics
import optimizers
import runners.pcr_trainers

import copy
from configs.common.datasets.point_cloud_registration.train.buffer_data_cfg import get_transforms_cfg
from configs.common.datasets.point_cloud_registration.train.buffer_data_cfg import data_cfg as train_data_cfg
from configs.common.datasets.point_cloud_registration.val.buffer_data_cfg import data_cfg as val_data_cfg
from configs.common.models.point_cloud_registration.buffer_cfg import model_cfg

optimizer_cfg = {
    'class': optimizers.SingleTaskOptimizer,
    'args': {
        'optimizer_config': {
            'class': torch.optim.Adam,
            'args': {
                'params': None,
                'lr': 1.0e-4,
                'weight_decay': 1.0e-06,
            },
        },
    },
}

scheduler_cfg = {
    'class': torch.optim.lr_scheduler.StepLR,
    'args': {
        'optimizer': None,
        'step_size': 1000,
        'gamma': 0.95,
    },
}

config = [
{
    'stage': 'Ref',
    'runner': runners.pcr_trainers.BufferTrainer,
    'work_dir': None,
    'epochs': 100,
    # seeds
    'init_seed': None,
    'train_seeds': None,
    # dataset config
    'train_dataset': copy.deepcopy(train_data_cfg['train_dataset']),
    'train_dataloader': copy.deepcopy(train_data_cfg['train_dataloader']),
    'criterion': {
        'class': criteria.vision_3d.point_cloud_registration.BUFFER_RefStageCriterion,
        'args': {},
    },
    'val_dataset': copy.deepcopy(val_data_cfg['val_dataset']),
    'val_dataloader': copy.deepcopy(val_data_cfg['val_dataloader']),
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': metrics.vision_3d.point_cloud_registration.BUFFER_RefStageMetric,
        'args': {},
    },
    # model config
    'model': copy.deepcopy(model_cfg),
    # optimizer config
    'optimizer': copy.deepcopy(optimizer_cfg),
    # scheduler config
    'scheduler': copy.deepcopy(scheduler_cfg),
},
{
    'stage': 'Desc',
    'runner': runners.pcr_trainers.BufferTrainer,
    'work_dir': None,
    'epochs': 100,
    # seeds
    'init_seed': None,
    'train_seeds': None,
    # dataset config
    'train_dataset': copy.deepcopy(train_data_cfg['train_dataset']),
    'train_dataloader': copy.deepcopy(train_data_cfg['train_dataloader']),
    'criterion': {
        'class': criteria.vision_3d.point_cloud_registration.BUFFER_DescStageCriterion,
        'args': {},
    },
    'val_dataset': copy.deepcopy(val_data_cfg['val_dataset']),
    'val_dataloader': copy.deepcopy(val_data_cfg['val_dataloader']),
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': metrics.vision_3d.point_cloud_registration.BUFFER_DescStageMetric,
        'args': {},
    },
    # model config
    'model': copy.deepcopy(model_cfg),
    # optimizer config
    'optimizer': copy.deepcopy(optimizer_cfg),
    # scheduler config
    'scheduler': copy.deepcopy(scheduler_cfg),
},
{
    'stage': 'Keypt',
    'runner': runners.pcr_trainers.BufferTrainer,
    'work_dir': None,
    'epochs': 100,
    # seeds
    'init_seed': None,
    'train_seeds': None,
    # dataset config
    'train_dataset': copy.deepcopy(train_data_cfg['train_dataset']),
    'train_dataloader': copy.deepcopy(train_data_cfg['train_dataloader']),
    'criterion': {
        'class': criteria.vision_3d.point_cloud_registration.BUFFER_KeyptStageCriterion,
        'args': {},
    },
    'val_dataset': copy.deepcopy(val_data_cfg['val_dataset']),
    'val_dataloader': copy.deepcopy(val_data_cfg['val_dataloader']),
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': metrics.vision_3d.point_cloud_registration.BUFFER_KeyptStageMetric,
        'args': {},
    },
    # model config
    'model': copy.deepcopy(model_cfg),
    # optimizer config
    'optimizer': copy.deepcopy(optimizer_cfg),
    # scheduler config
    'scheduler': copy.deepcopy(scheduler_cfg),
},
{
    'stage': 'Inlier',
    'runner': runners.pcr_trainers.BufferTrainer,
    'work_dir': None,
    'epochs': 100,
    # seeds
    'init_seed': None,
    'train_seeds': None,
    # dataset config
    'train_dataset': copy.deepcopy(train_data_cfg['train_dataset']),
    'train_dataloader': copy.deepcopy(train_data_cfg['train_dataloader']),
    'criterion': {
        'class': criteria.vision_3d.point_cloud_registration.BUFFER_InlierStageCriterion,
        'args': {},
    },
    'val_dataset': copy.deepcopy(val_data_cfg['val_dataset']),
    'val_dataloader': copy.deepcopy(val_data_cfg['val_dataloader']),
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': metrics.vision_3d.point_cloud_registration.BUFFER_InlierStageMetric,
        'args': {},
    },
    # model config
    'model': copy.deepcopy(model_cfg),
    # optimizer config
    'optimizer': copy.deepcopy(optimizer_cfg),
    # scheduler config
    'scheduler': copy.deepcopy(scheduler_cfg),
},
]

config[0]['train_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 3)
config[1]['train_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)
config[2]['train_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)
config[3]['train_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)

config[0]['val_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 3)
config[1]['val_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)
config[2]['val_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)
config[3]['val_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)

config[0]['model']['args']['config']['stage'] = 'Ref'
config[1]['model']['args']['config']['stage'] = 'Desc'
config[2]['model']['args']['config']['stage'] = 'Keypt'
config[3]['model']['args']['config']['stage'] = 'Inlier'

# seeds
config[0]['init_seed'] = 51098330
config[0]['train_seeds'] = [86356290, 57959247, 8174696, 37865483, 6739552, 86519856, 80388542, 94967517, 86143939, 47440127, 13946257, 85517780, 48043776, 54246444, 30502139, 51230331, 87433427, 15897673, 55688698, 31511620, 59285039, 96348633, 57338221, 72787386, 18418765, 38574177, 73107484, 27284157, 30544505, 54879857, 74007399, 43726532, 37209326, 5696522, 82647996, 65601289, 90963086, 74817370, 34939251, 2053482, 35065298, 9480432, 67289894, 62214632, 44989688, 56767358, 64087979, 66817826, 83451830, 39219138, 66912989, 70291056, 82646914, 6927683, 98385366, 37635880, 96995122, 10781164, 5727212, 97924148, 16050769, 75322542, 87294966, 10456362, 13587550, 45203115, 28342129, 98018273, 51547282, 87247056, 86117696, 27363329, 40490564, 11116795, 56377655, 54519168, 38448020, 35693648, 34164445, 53714772, 84968418, 47064685, 4535334, 53974851, 21336240, 64939754, 45223737, 80375038, 79415011, 29864891, 27546413, 60928128, 33728565, 18470471, 47130224, 21841587, 76796580, 58742026, 4659956, 16417706]
config[1]['init_seed'] = 21991246
config[1]['train_seeds'] = [6967400, 92722296, 64645678, 71528872, 50081471, 81130680, 45542948, 29914865, 57072133, 24043481, 49641447, 24087347, 43702499, 12957258, 68948059, 7629120, 869847, 4282160, 72382432, 55405373, 36170301, 96789994, 5958458, 98360265, 6990304, 754901, 27652025, 16918762, 69556387, 75410601, 47666629, 23184530, 19959802, 54468705, 54473221, 44046359, 74620124, 32350723, 25139369, 82685086, 34631468, 64907213, 84772417, 16678063, 59273904, 69193251, 65168356, 5988192, 91907356, 76225653, 13623412, 86447509, 52675981, 99553234, 60385212, 43558144, 54091729, 16317368, 47303912, 59566426, 33664424, 37784204, 1509649, 97478235, 11251964, 81632173, 50071282, 8332759, 21746105, 71985906, 90808680, 24775714, 98756922, 71268240, 90365411, 10657120, 9864524, 57521357, 83998672, 24727744, 52052452, 60919204, 10065580, 29420086, 22879271, 45881916, 7688842, 72247774, 3615085, 37385612, 84535819, 85262334, 55794679, 94014873, 33535793, 81519518, 38286036, 66172624, 22006129, 31495862]
config[2]['init_seed'] = 96738012
config[2]['train_seeds'] = [43789166, 62369393, 85279132, 66291945, 28140922, 86357831, 65553069, 73123004, 10806069, 30550302, 69693359, 2938004, 26102120, 49461080, 39754070, 36612069, 3355420, 45509251, 2691334, 55279826, 17319592, 58255670, 67518469, 74524097, 25097061, 13420423, 75144004, 41137476, 98842353, 11979461, 57134533, 15427023, 35302633, 91112843, 24011578, 34345660, 24608641, 31014458, 34634895, 9503988, 75859913, 95793355, 62033027, 63008915, 1058153, 16259599, 25746732, 8660076, 21996117, 33648234, 64060664, 81147771, 88934908, 66723957, 17726809, 37291189, 23285606, 91177704, 61387485, 43070342, 85443717, 64200193, 68114599, 1442465, 54924972, 19901034, 62761450, 33589664, 63882057, 61789087, 12668401, 44899278, 66638565, 16122659, 96833112, 56794437, 68425900, 86005368, 33772217, 30742389, 62821302, 54346112, 52886382, 28748256, 97752884, 71675368, 73005387, 3909400, 44210278, 5074404, 53338063, 68079550, 49138662, 63534937, 72269000, 31045181, 17965227, 93159704, 98744883, 42587954]
config[3]['init_seed'] = 39710508
config[3]['train_seeds'] = [16883941, 21984009, 3744749, 68987235, 87166140, 3793628, 8821042, 93721413, 14527951, 7495892, 75158285, 81591115, 60171077, 33316992, 97345919, 81225592, 88646203, 79358554, 99354139, 87144772, 95871953, 76028358, 48442093, 53301046, 15956590, 94731001, 39683101, 5676983, 58663492, 52615613, 31611281, 9139398, 27842556, 41368902, 46312402, 7364449, 36907065, 77388603, 54047161, 26541353, 15196078, 30155406, 77147702, 36669008, 94614999, 6681924, 18547611, 28340864, 99159127, 72393301, 46854316, 46483048, 35222770, 56047512, 23700719, 61371402, 89062447, 45146556, 7308743, 16771180, 68216355, 46689533, 34449419, 21690173, 40623579, 10952183, 57201505, 46448614, 98266646, 7474273, 60856291, 4106568, 53837776, 10328759, 85769077, 25546228, 89516553, 22670646, 29147919, 49772152, 41811261, 3461258, 22668863, 95005015, 15936134, 87008800, 12867379, 32277909, 32679425, 66224593, 79985539, 2535934, 17395719, 9432441, 51932502, 53019822, 94307821, 65854932, 30061085, 26188197]

# work dir
config[0]['work_dir'] = "./logs/benchmarks/point_cloud_registration/real_pcr_0.4/BUFFER_run_2"
config[1]['work_dir'] = "./logs/benchmarks/point_cloud_registration/real_pcr_0.4/BUFFER_run_2"
config[2]['work_dir'] = "./logs/benchmarks/point_cloud_registration/real_pcr_0.4/BUFFER_run_2"
config[3]['work_dir'] = "./logs/benchmarks/point_cloud_registration/real_pcr_0.4/BUFFER_run_2"
