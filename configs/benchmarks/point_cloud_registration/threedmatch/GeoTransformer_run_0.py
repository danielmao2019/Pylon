# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
import functools
from torch.optim.adam import Adam
from torch.optim.lr_scheduler import StepLR
from criteria.vision_3d.point_cloud_registration.geotransformer_criterion.geotransformer_criterion import GeoTransformerCriterion
from data.dataloaders.geotransformer_dataloader import GeoTransformerDataloader
from data.datasets.pcr_datasets.threedmatch_dataset import ThreeDMatchDataset
from data.transforms.compose import Compose
from data.transforms.vision_3d.gaussian_pos_noise import GaussianPosNoise
from data.transforms.vision_3d.random_rigid_transform import RandomRigidTransform
from metrics.vision_3d.point_cloud_registration.geotransformer_metric.geotransformer_metric import GeoTransformerMetric
from models.point_cloud_registration.geotransformer.geotransformer import GeoTransformer
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.supervised_single_task_trainer import SupervisedSingleTaskTrainer
from utils.point_cloud_ops.correspondences import get_correspondences
from utils.point_cloud_ops.random_select import RandomSelect


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/point_cloud_registration/threedmatch/GeoTransformer_run_0',
    'epochs': 100,
    'init_seed': 1465026,
    'train_seeds': [89425665, 90694723, 42660823, 57689396, 36749355, 64284958, 53497863, 37692350, 77560865, 59205134, 94353820, 36267144, 26577073, 70382887, 23456162, 77112935, 15891018, 75067330, 42057525, 80244281, 13948058, 5428404, 90071950, 85300445, 60052561, 96321918, 35237532, 28522400, 15314917, 27436057, 12858537, 6657494, 37572630, 55262202, 80769946, 48228506, 26499597, 63344909, 39661026, 42308807, 81873224, 50862081, 19486069, 72206961, 19461931, 21890234, 1333046, 48319465, 81164779, 41574279, 2318175, 1502642, 91406537, 93361077, 54757267, 30410180, 96813803, 22938808, 12090094, 16115139, 55189526, 35151491, 121264, 10111790, 56339621, 57952708, 4344878, 94380236, 94624419, 84209463, 97971278, 57005337, 1322719, 97436205, 63927337, 88289489, 40896097, 33238039, 82932176, 87820414, 54758770, 50161344, 41682765, 99443895, 1952042, 75174410, 60423778, 28112790, 70678150, 73980622, 977024, 3958057, 47219202, 86920685, 31142255, 63921655, 31046618, 60876688, 82962647, 65196239],
    'val_seeds': [95744113, 84917174, 92379768, 93164935, 27120786, 31950774, 80065758, 92618476, 39066701, 66062997, 32627318, 42568954, 34796828, 89745751, 74434811, 50050294, 77243931, 1752578, 21794669, 54944415, 86033455, 36942870, 66441898, 96589204, 55402717, 56232859, 1911646, 4441099, 40006844, 77640672, 71316030, 70334359, 88212382, 343216, 57632280, 4219526, 73681747, 38642707, 22377256, 43672899, 13862478, 9184802, 3118106, 2370826, 13317534, 68039643, 15143671, 71447570, 5871464, 11954660, 33213995, 96216851, 91648690, 3755797, 66058547, 85088277, 42767772, 7887177, 17883542, 27559977, 69944786, 16951191, 87909851, 20365246, 69173816, 58641811, 30937204, 57979655, 39618663, 36621258, 86413443, 50599050, 72737485, 1226472, 70880736, 146701, 42986855, 80222839, 61511344, 54224477, 4656118, 42000826, 1366454, 79481943, 22397896, 79773688, 47848516, 11496666, 56831225, 22346628, 83083576, 35818355, 94240233, 75035907, 41703203, 80744183, 31375698, 82243003, 75278982, 33488528],
    'test_seed': 25271652,
    'train_dataset': {
        'class': ThreeDMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'train',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
), {
    'op': functools.partial(get_correspondences, radius=0.0375),
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')],
    'output_names': [('inputs', 'correspondences')],
}, (
    {
            'class': RandomRigidTransform,
            'args': {
                'rot_mag': 45.0,
                'trans_mag': 0.5,
                'method': 'Rodrigues',
            },
        },
    [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'tgt_pc')]
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': True,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'criterion': {
        'class': GeoTransformerCriterion,
        'args': {
            'loss': {
                'weight_coarse_loss': 1.0,
                'weight_fine_loss': 1.0,
            },
            'coarse_loss': {
                'positive_margin': 0.1,
                'negative_margin': 1.4,
                'positive_optimal': 0.1,
                'negative_optimal': 1.4,
                'log_scale': 24,
                'positive_overlap': 0.1,
            },
            'fine_loss': {
                'positive_radius': 0.05,
            },
        },
    },
    'val_dataset': {
        'class': ThreeDMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'val',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
), {
    'op': functools.partial(get_correspondences, radius=0.0375),
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')],
    'output_names': [('inputs', 'correspondences')],
}],
                },
            },
        },
    },
    'val_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': False,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': GeoTransformerMetric,
        'args': {
            'acceptance_overlap': 0.0,
            'acceptance_radius': 0.1,
            'inlier_ratio_threshold': 0.05,
            'rmse_threshold': 0.2,
            'rre_threshold': 15.0,
            'rte_threshold': 0.3,
        },
    },
    'model': {
        'class': GeoTransformer,
        'args': {
            'model': {
                'ground_truth_matching_radius': 0.05,
                'num_points_in_patch': 32,
                'num_sinkhorn_iterations': 100,
            },
            'backbone': {
                'num_stages': 4,
                'init_voxel_size': 0.025,
                'kernel_size': 15,
                'base_radius': 2.5,
                'base_sigma': 2.0,
                'init_radius': 0.0625,
                'init_sigma': 0.05,
                'group_norm': 32,
                'input_dim': 1,
                'init_dim': 64,
                'output_dim': 256,
            },
            'geotransformer': {
                'input_dim': 1024,
                'hidden_dim': 256,
                'output_dim': 256,
                'num_heads': 4,
                'blocks': ['self', 'cross', 'self', 'cross', 'self', 'cross'],
                'sigma_d': 0.2,
                'sigma_a': 15,
                'angle_k': 3,
                'reduction_a': 'max',
            },
            'coarse_matching': {
                'num_targets': 128,
                'overlap_threshold': 0.1,
                'num_correspondences': 256,
                'dual_normalization': True,
            },
            'fine_matching': {
                'topk': 3,
                'acceptance_radius': 0.1,
                'mutual': True,
                'confidence_threshold': 0.05,
                'use_dustbin': False,
                'use_global_score': False,
                'correspondence_threshold': 3,
                'correspondence_limit': None,
                'num_refinement_steps': 5,
            },
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': Adam,
                'args': {
                    'params': None,
                    'lr': 0.001,
                    'weight_decay': 1e-06,
                },
            },
        },
    },
    'scheduler': {
        'class': StepLR,
        'args': {
            'optimizer': None,
            'step_size': 1000.0,
            'gamma': 0.95,
        },
    },
}
