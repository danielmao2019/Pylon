# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
import functools
from torch.optim.adam import Adam
from torch.optim.lr_scheduler import StepLR
from criteria.vision_3d.point_cloud_registration.geotransformer_criterion.geotransformer_criterion import GeoTransformerCriterion
from data.dataloaders.geotransformer_dataloader import GeoTransformerDataloader
from data.datasets.pcr_datasets.threedmatch_dataset import ThreeDMatchDataset
from data.transforms.compose import Compose
from data.transforms.vision_3d.gaussian_pos_noise import GaussianPosNoise
from data.transforms.vision_3d.random_rigid_transform import RandomRigidTransform
from metrics.vision_3d.point_cloud_registration.geotransformer_metric.geotransformer_metric import GeoTransformerMetric
from models.point_cloud_registration.geotransformer.geotransformer import GeoTransformer
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.supervised_single_task_trainer import SupervisedSingleTaskTrainer
from utils.point_cloud_ops.correspondences import get_correspondences
from utils.point_cloud_ops.random_select import RandomSelect


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/point_cloud_registration/threedmatch/GeoTransformer_run_2',
    'epochs': 100,
    'init_seed': 73866830,
    'train_seeds': [97188687, 77122903, 323955, 91660166, 77221592, 13026285, 78205072, 46495102, 3717906, 44745825, 98259188, 60387041, 56270564, 23563014, 10992073, 83500109, 25008746, 89032949, 16865466, 88928462, 82686785, 8807568, 90033062, 12295034, 7416475, 42836473, 17560634, 98253122, 1186075, 5218369, 1855279, 38594037, 30098441, 20258887, 19013393, 56594974, 39491553, 87725203, 16041985, 14624202, 19516797, 68303121, 13208344, 85794236, 92782996, 53819784, 22757988, 43909784, 20057832, 26759774, 36018660, 88128766, 57255864, 12536897, 84880228, 68129170, 5686701, 45819686, 31304304, 93124621, 23056755, 95011605, 84500572, 31914045, 32118966, 42061968, 6858106, 88395304, 87268851, 11823630, 23292344, 59803801, 71016800, 42021314, 14464658, 91841594, 52228317, 1221589, 2165013, 78682176, 54613895, 72195927, 9459917, 29290662, 24796438, 980334, 19137857, 73989876, 57537657, 64561001, 47693057, 23683514, 94379184, 64715046, 39902966, 58921172, 16867850, 59502662, 54844343, 40844397],
    'val_seeds': [61961391, 78025939, 19731142, 63018675, 75112307, 79415635, 3492117, 58768570, 80175735, 91634763, 48269737, 77688419, 89915426, 99044482, 30318199, 87976968, 40274200, 65966896, 57353734, 34513873, 11841097, 81587799, 20209811, 46874547, 18419767, 28970332, 13373616, 65355633, 95925933, 95048539, 27307646, 21929787, 17642913, 10681812, 89632890, 21049903, 97686302, 80011651, 85412273, 54764420, 66772039, 75354782, 62948896, 70934312, 15049495, 38823489, 15863580, 87131201, 33152678, 1094421, 25493909, 71581167, 19517519, 71774067, 28132452, 48656015, 19720199, 2357067, 59806944, 58834818, 44560581, 38235852, 9164752, 88853872, 25214234, 52092017, 7847405, 99526787, 35974246, 19074865, 17606549, 50609711, 56584608, 68035915, 19042718, 55739404, 88382518, 37079956, 78789939, 98410349, 43294744, 1072373, 46111268, 94010235, 24716115, 39644917, 48835845, 71226997, 44387108, 19855954, 32006270, 13161726, 5186637, 28488243, 93701738, 32000747, 71187593, 96687673, 24489207, 96864338],
    'test_seed': 91419415,
    'train_dataset': {
        'class': ThreeDMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'train',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
), {
    'op': functools.partial(get_correspondences, radius=0.0375),
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')],
    'output_names': [('inputs', 'correspondences')],
}, (
    {
            'class': RandomRigidTransform,
            'args': {
                'rot_mag': 45.0,
                'trans_mag': 0.5,
                'method': 'Rodrigues',
            },
        },
    [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'tgt_pc')]
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': True,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'criterion': {
        'class': GeoTransformerCriterion,
        'args': {
            'loss': {
                'weight_coarse_loss': 1.0,
                'weight_fine_loss': 1.0,
            },
            'coarse_loss': {
                'positive_margin': 0.1,
                'negative_margin': 1.4,
                'positive_optimal': 0.1,
                'negative_optimal': 1.4,
                'log_scale': 24,
                'positive_overlap': 0.1,
            },
            'fine_loss': {
                'positive_radius': 0.05,
            },
        },
    },
    'val_dataset': {
        'class': ThreeDMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'val',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
), {
    'op': functools.partial(get_correspondences, radius=0.0375),
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')],
    'output_names': [('inputs', 'correspondences')],
}],
                },
            },
        },
    },
    'val_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': False,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': GeoTransformerMetric,
        'args': {
            'acceptance_overlap': 0.0,
            'acceptance_radius': 0.1,
            'inlier_ratio_threshold': 0.05,
            'rmse_threshold': 0.2,
            'rre_threshold': 15.0,
            'rte_threshold': 0.3,
        },
    },
    'model': {
        'class': GeoTransformer,
        'args': {
            'model': {
                'ground_truth_matching_radius': 0.05,
                'num_points_in_patch': 32,
                'num_sinkhorn_iterations': 100,
            },
            'backbone': {
                'num_stages': 4,
                'init_voxel_size': 0.025,
                'kernel_size': 15,
                'base_radius': 2.5,
                'base_sigma': 2.0,
                'init_radius': 0.0625,
                'init_sigma': 0.05,
                'group_norm': 32,
                'input_dim': 1,
                'init_dim': 64,
                'output_dim': 256,
            },
            'geotransformer': {
                'input_dim': 1024,
                'hidden_dim': 256,
                'output_dim': 256,
                'num_heads': 4,
                'blocks': ['self', 'cross', 'self', 'cross', 'self', 'cross'],
                'sigma_d': 0.2,
                'sigma_a': 15,
                'angle_k': 3,
                'reduction_a': 'max',
            },
            'coarse_matching': {
                'num_targets': 128,
                'overlap_threshold': 0.1,
                'num_correspondences': 256,
                'dual_normalization': True,
            },
            'fine_matching': {
                'topk': 3,
                'acceptance_radius': 0.1,
                'mutual': True,
                'confidence_threshold': 0.05,
                'use_dustbin': False,
                'use_global_score': False,
                'correspondence_threshold': 3,
                'correspondence_limit': None,
                'num_refinement_steps': 5,
            },
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': Adam,
                'args': {
                    'params': None,
                    'lr': 0.001,
                    'weight_decay': 1e-06,
                },
            },
        },
    },
    'scheduler': {
        'class': StepLR,
        'args': {
            'optimizer': None,
            'step_size': 1000.0,
            'gamma': 0.95,
        },
    },
}
