# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
import functools
from torch.optim.adam import Adam
from torch.optim.lr_scheduler import StepLR
from criteria.vision_3d.point_cloud_registration.d3feat_criteria.d3feat_criterion import D3FeatCriterion
from data.dataloaders.d3feat_dataloader import D3FeatDataLoader
from data.datasets.pcr_datasets.threedmatch_dataset import ThreeDMatchDataset
from data.transforms.compose import Compose
from data.transforms.vision_3d.gaussian_pos_noise import GaussianPosNoise
from data.transforms.vision_3d.random_rigid_transform import RandomRigidTransform
from metrics.vision_3d.point_cloud_registration.d3feat_metrics.d3feat_metric import D3FeatDescriptorMetric
from models.point_cloud_registration.d3feat.d3feat_model import D3FeatModel
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.trainers.supervised_single_task_trainer import SupervisedSingleTaskTrainer
from utils.point_cloud_ops.correspondences import get_correspondences
from utils.point_cloud_ops.random_select import RandomSelect


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/point_cloud_registration/threedmatch/D3Feat_run_1',
    'epochs': 100,
    'init_seed': 93052067,
    'train_seeds': [67113722, 3050976, 3467445, 78950893, 51100232, 71398764, 42068363, 64050843, 15071850, 57856460, 20513738, 27438810, 87725195, 50541432, 5942487, 92572331, 15747208, 55280441, 15397899, 18843873, 4486724, 18792230, 77025582, 55175081, 15720571, 21651964, 8035747, 43747972, 81328379, 45017073, 64969290, 48756918, 78906317, 96595061, 50531295, 48936105, 66449893, 85467149, 98482391, 99386285, 90440999, 67587998, 10647156, 57558944, 38541167, 13106878, 33585094, 49625472, 2075117, 38486970, 82124260, 84483482, 45836432, 62755782, 67449441, 72930441, 30841023, 73449782, 76040278, 61589639, 27325452, 72223059, 86347469, 31380252, 28210745, 44990195, 73328708, 84797295, 35690511, 8127192, 86261347, 27342842, 98626045, 40531147, 38237037, 83938969, 11489914, 3260109, 82360523, 45715665, 88108555, 79003965, 7897557, 31779777, 42084756, 92141457, 74351532, 75985367, 86652666, 2013874, 22839101, 11052687, 1293818, 21524634, 26272411, 96537114, 63049672, 9538004, 74611124, 59087496],
    'val_seeds': [63448649, 83571637, 20446964, 53163746, 20140157, 52152521, 77053468, 95943550, 31579643, 83271563, 59678171, 96338794, 72654872, 8175611, 95948103, 29627839, 11021684, 86295858, 12479252, 2210291, 89290168, 30424285, 80909983, 30315560, 26999676, 81999215, 16059080, 29173506, 373568, 7483630, 10282253, 5283930, 36891166, 50846370, 40642114, 21719627, 66674567, 67709472, 60333836, 49089555, 11324454, 92424379, 41604782, 91824262, 20907435, 23895069, 16730340, 64710982, 77843610, 52074323, 61169686, 43202306, 52159691, 58452636, 73837142, 69176537, 83886959, 19444895, 77326419, 21461990, 70974796, 23960848, 37694127, 26165971, 26274376, 92807308, 26146311, 46509271, 30904096, 38344190, 56992456, 34564889, 44169222, 8029134, 19383415, 40726026, 62364677, 81935637, 88502417, 80736559, 15757783, 1080690, 9707735, 52877235, 23680825, 89041777, 96919389, 85182764, 23710058, 66617250, 49868618, 61614634, 46968784, 59802181, 98796307, 9749911, 36165252, 37916655, 99217247, 15144615],
    'test_seed': 8080793,
    'train_dataset': {
        'class': ThreeDMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'train',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
), {
    'op': functools.partial(get_correspondences, radius=0.0375),
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')],
    'output_names': [('inputs', 'correspondences')],
}, (
    {
            'class': RandomRigidTransform,
            'args': {
                'rot_mag': 45.0,
                'trans_mag': 0.5,
                'method': 'Rodrigues',
            },
        },
    [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': GaussianPosNoise,
            'args': {
                'std': 0.01,
            },
        },
    [('inputs', 'tgt_pc')]
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': D3FeatDataLoader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': True,
            'config': {
                'num_layers': 5,
                'first_subsampling_dl': 0.03,
                'conv_radius': 2.5,
                'deform_radius': 5.0,
                'num_kernel_points': 15,
            },
        },
    },
    'criterion': {
        'class': D3FeatCriterion,
        'args': {
            'loss_type': 'circle',
            'pos_margin': 0.1,
            'neg_margin': 1.4,
            'pos_optimal': 0.1,
            'neg_optimal': 1.4,
            'log_scale': 10.0,
            'safe_radius': 0.04,
            'use_buffer': True,
        },
    },
    'val_dataset': {
        'class': ThreeDMatchDataset,
        'args': {
            'data_root': './data/datasets/soft_links/threedmatch',
            'split': 'val',
            'matching_radius': 0.1,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'src_pc')]
), (
    {
            'class': RandomSelect,
            'args': {
                'count': 5000,
            },
        },
    [('inputs', 'tgt_pc')]
), {
    'op': functools.partial(get_correspondences, radius=0.0375),
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc'), ('labels', 'transform')],
    'output_names': [('inputs', 'correspondences')],
}],
                },
            },
        },
    },
    'val_dataloader': {
        'class': D3FeatDataLoader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'shuffle': False,
            'config': {
                'num_layers': 5,
                'first_subsampling_dl': 0.03,
                'conv_radius': 2.5,
                'deform_radius': 5.0,
                'num_kernel_points': 15,
            },
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': D3FeatDescriptorMetric,
        'args': {
            'distance_threshold': 0.1,
            'use_buffer': True,
        },
    },
    'model': {
        'class': D3FeatModel,
        'args': {
            'num_layers': 5,
            'in_points_dim': 3,
            'first_features_dim': 128,
            'first_subsampling_dl': 0.03,
            'in_features_dim': 1,
            'conv_radius': 2.5,
            'deform_radius': 5.0,
            'num_kernel_points': 15,
            'KP_extent': 2.0,
            'KP_influence': 'linear',
            'aggregation_mode': 'sum',
            'fixed_kernel_points': 'center',
            'use_batch_norm': False,
            'batch_norm_momentum': 0.02,
            'deformable': False,
            'modulated': False,
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': Adam,
                'args': {
                    'params': None,
                    'lr': 0.001,
                    'weight_decay': 1e-06,
                },
            },
        },
    },
    'scheduler': {
        'class': StepLR,
        'args': {
            'optimizer': None,
            'step_size': 1000.0,
            'gamma': 0.95,
        },
    },
}
