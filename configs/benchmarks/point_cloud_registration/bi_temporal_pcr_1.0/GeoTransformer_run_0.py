# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
from torch.optim.adam import Adam
from torch.optim.lr_scheduler import StepLR
from criteria.vision_3d.point_cloud_registration.geotransformer_criterion.geotransformer_criterion import GeoTransformerCriterion
from data.dataloaders.geotransformer_dataloader import GeoTransformerDataloader
from data.datasets.pcr_datasets.bi_temporal_pcr_dataset import BiTemporalPCRDataset
from data.transforms.compose import Compose
from data.transforms.vision_3d.clamp import Clamp
from metrics.vision_3d.point_cloud_registration.geotransformer_metric.geotransformer_metric import GeoTransformerMetric
from models.point_cloud_registration.geotransformer.geotransformer import GeoTransformer
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.supervised_single_task_trainer import SupervisedSingleTaskTrainer


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/point_cloud_registration/bi_temporal_pcr_1.0/GeoTransformer_run_0',
    'epochs': 100,
    'init_seed': 93840279,
    'train_seeds': [59115183, 58223017, 87246294, 83471678, 50370288, 10458096, 91844691, 35604856, 88033294, 23689807, 43131496, 83573250, 76180644, 33680703, 70074086, 69228077, 72839204, 3613812, 93941578, 36156007, 92447455, 95135341, 70747746, 36513691, 35042587, 98626247, 95208684, 58529957, 15286458, 23179460, 97622655, 12117619, 44833587, 47909173, 41460487, 53382293, 24151911, 6470002, 19723813, 17227561, 19410661, 82254988, 52981977, 82397441, 50053568, 45104832, 70685095, 63447467, 78931690, 63026849, 70658684, 30767155, 393412, 51778127, 24645533, 66473271, 67850292, 90839412, 22472, 20539794, 77924972, 10234607, 49724937, 68605688, 597658, 90314790, 41599321, 92081823, 34614615, 29902632, 94461438, 13029284, 88520526, 28722910, 71371844, 34684362, 18813451, 93849043, 76997872, 18892102, 23302308, 11032813, 90486394, 81224822, 21817848, 30887642, 26054731, 40515006, 75810423, 44097541, 65353035, 13677312, 17667756, 53572121, 181962, 10291529, 89997107, 90456330, 47097595, 92000762],
    'val_seeds': [81761706, 37209528, 54016915, 5535951, 87907780, 51053388, 1927842, 89849539, 81087699, 64505784, 13765202, 2338338, 76225357, 68110250, 16605010, 25309343, 88822052, 24360266, 86575559, 67550621, 34194332, 68541475, 44293320, 81267376, 64224256, 79798631, 50113713, 51184497, 27229743, 55342899, 65072017, 90476218, 81523676, 44703970, 90301270, 22338396, 60466657, 40501576, 88087102, 88632005, 11325596, 36595004, 84443018, 34981714, 56651702, 89986557, 41895019, 64624949, 3167676, 49759334, 73743962, 78346560, 37897416, 13095040, 57726672, 71647081, 43832802, 13260975, 38456191, 57698112, 88997945, 31069442, 98691000, 15777804, 74256032, 94699376, 87962099, 460630, 61649446, 19403886, 55863329, 8974660, 27662839, 34410310, 46573680, 23367831, 21698184, 41536681, 51137576, 5922949, 35667356, 70197919, 20828513, 10884835, 6661043, 2469014, 511298, 31018823, 14065631, 55435337, 75798218, 51595822, 11010281, 85494281, 85308302, 71399205, 97068899, 33739588, 7811353, 69173054],
    'test_seed': 48089196,
    'train_dataset': {
        'class': BiTemporalPCRDataset,
        'args': {
            'data_root': './data/datasets/soft_links/ivision-pcr-data',
            'gt_transforms': './data/datasets/soft_links/ivision-pcr-data/gt_transforms.json',
            'cache_filepath': './data/datasets/soft_links/ivision-pcr-data/../bi_temporal_pcr_cache.json',
            'split': 'train',
            'dataset_size': 5000,
            'rotation_mag': 45.0,
            'translation_mag': 0.5,
            'matching_radius': 0.05,
            'overlap_range': (0.0, 1.0),
            'min_points': 512,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [{
    'op': {
        'class': Clamp,
        'args': {
            'max_points': 4096,
        },
    },
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc')],
}],
                },
            },
            'overlap': 1.0,
        },
    },
    'train_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'criterion': {
        'class': GeoTransformerCriterion,
        'args': {
            'loss': {
                'weight_coarse_loss': 1.0,
                'weight_fine_loss': 1.0,
            },
            'coarse_loss': {
                'positive_margin': 0.1,
                'negative_margin': 1.4,
                'positive_optimal': 0.1,
                'negative_optimal': 1.4,
                'log_scale': 24,
                'positive_overlap': 0.1,
            },
            'fine_loss': {
                'positive_radius': 0.05,
            },
        },
    },
    'val_dataset': {
        'class': BiTemporalPCRDataset,
        'args': {
            'data_root': './data/datasets/soft_links/ivision-pcr-data',
            'gt_transforms': './data/datasets/soft_links/ivision-pcr-data/gt_transforms.json',
            'cache_filepath': './data/datasets/soft_links/ivision-pcr-data/../bi_temporal_pcr_cache.json',
            'split': 'val',
            'dataset_size': 1000,
            'rotation_mag': 45.0,
            'translation_mag': 0.5,
            'matching_radius': 0.05,
            'overlap_range': (0.0, 1.0),
            'min_points': 512,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [{
    'op': {
        'class': Clamp,
        'args': {
            'max_points': 4096,
        },
    },
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc')],
}],
                },
            },
            'overlap': 1.0,
        },
    },
    'val_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': GeoTransformerMetric,
        'args': {
            'acceptance_overlap': 0.0,
            'acceptance_radius': 0.1,
            'inlier_ratio_threshold': 0.05,
            'rmse_threshold': 0.2,
            'rre_threshold': 15.0,
            'rte_threshold': 0.3,
        },
    },
    'model': {
        'class': GeoTransformer,
        'args': {
            'model': {
                'ground_truth_matching_radius': 0.05,
                'num_points_in_patch': 32,
                'num_sinkhorn_iterations': 100,
            },
            'backbone': {
                'num_stages': 4,
                'init_voxel_size': 0.025,
                'kernel_size': 15,
                'base_radius': 2.5,
                'base_sigma': 2.0,
                'init_radius': 0.0625,
                'init_sigma': 0.05,
                'group_norm': 32,
                'input_dim': 1,
                'init_dim': 64,
                'output_dim': 256,
            },
            'geotransformer': {
                'input_dim': 1024,
                'hidden_dim': 256,
                'output_dim': 256,
                'num_heads': 4,
                'blocks': ['self', 'cross', 'self', 'cross', 'self', 'cross'],
                'sigma_d': 0.2,
                'sigma_a': 15,
                'angle_k': 3,
                'reduction_a': 'max',
            },
            'coarse_matching': {
                'num_targets': 128,
                'overlap_threshold': 0.1,
                'num_correspondences': 256,
                'dual_normalization': True,
            },
            'fine_matching': {
                'topk': 3,
                'acceptance_radius': 0.1,
                'mutual': True,
                'confidence_threshold': 0.05,
                'use_dustbin': False,
                'use_global_score': False,
                'correspondence_threshold': 3,
                'correspondence_limit': None,
                'num_refinement_steps': 5,
            },
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': Adam,
                'args': {
                    'params': None,
                    'lr': 0.0001,
                    'weight_decay': 1e-06,
                },
            },
        },
    },
    'scheduler': {
        'class': StepLR,
        'args': {
            'optimizer': None,
            'step_size': 1000,
            'gamma': 0.95,
        },
    },
}
