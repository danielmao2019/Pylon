# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
import torch
import criteria
import metrics
import optimizers
import runners.pcr_trainers

import copy
from configs.common.datasets.point_cloud_registration.train.buffer_data_cfg import get_transforms_cfg
from configs.common.datasets.point_cloud_registration.train.buffer_data_cfg import data_cfg as train_data_cfg
from configs.common.datasets.point_cloud_registration.val.buffer_data_cfg import data_cfg as val_data_cfg
from configs.common.models.point_cloud_registration.buffer_cfg import model_cfg

optimizer_cfg = {
    'class': optimizers.SingleTaskOptimizer,
    'args': {
        'optimizer_config': {
            'class': torch.optim.Adam,
            'args': {
                'params': None,
                'lr': 1.0e-4,
                'weight_decay': 1.0e-06,
            },
        },
    },
}

scheduler_cfg = {
    'class': torch.optim.lr_scheduler.StepLR,
    'args': {
        'optimizer': None,
        'step_size': 1000,
        'gamma': 0.95,
    },
}

config = [
{
    'stage': 'Ref',
    'runner': runners.pcr_trainers.BufferTrainer,
    'work_dir': None,
    'epochs': 100,
    # seeds
    'init_seed': None,
    'train_seeds': None,
    # dataset config
    'train_dataset': copy.deepcopy(train_data_cfg['train_dataset']),
    'train_dataloader': copy.deepcopy(train_data_cfg['train_dataloader']),
    'criterion': {
        'class': criteria.vision_3d.point_cloud_registration.BUFFER_RefStageCriterion,
        'args': {},
    },
    'val_dataset': copy.deepcopy(val_data_cfg['val_dataset']),
    'val_dataloader': copy.deepcopy(val_data_cfg['val_dataloader']),
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': metrics.vision_3d.point_cloud_registration.BUFFER_RefStageMetric,
        'args': {},
    },
    # model config
    'model': copy.deepcopy(model_cfg),
    # optimizer config
    'optimizer': copy.deepcopy(optimizer_cfg),
    # scheduler config
    'scheduler': copy.deepcopy(scheduler_cfg),
},
{
    'stage': 'Desc',
    'runner': runners.pcr_trainers.BufferTrainer,
    'work_dir': None,
    'epochs': 100,
    # seeds
    'init_seed': None,
    'train_seeds': None,
    # dataset config
    'train_dataset': copy.deepcopy(train_data_cfg['train_dataset']),
    'train_dataloader': copy.deepcopy(train_data_cfg['train_dataloader']),
    'criterion': {
        'class': criteria.vision_3d.point_cloud_registration.BUFFER_DescStageCriterion,
        'args': {},
    },
    'val_dataset': copy.deepcopy(val_data_cfg['val_dataset']),
    'val_dataloader': copy.deepcopy(val_data_cfg['val_dataloader']),
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': metrics.vision_3d.point_cloud_registration.BUFFER_DescStageMetric,
        'args': {},
    },
    # model config
    'model': copy.deepcopy(model_cfg),
    # optimizer config
    'optimizer': copy.deepcopy(optimizer_cfg),
    # scheduler config
    'scheduler': copy.deepcopy(scheduler_cfg),
},
{
    'stage': 'Keypt',
    'runner': runners.pcr_trainers.BufferTrainer,
    'work_dir': None,
    'epochs': 100,
    # seeds
    'init_seed': None,
    'train_seeds': None,
    # dataset config
    'train_dataset': copy.deepcopy(train_data_cfg['train_dataset']),
    'train_dataloader': copy.deepcopy(train_data_cfg['train_dataloader']),
    'criterion': {
        'class': criteria.vision_3d.point_cloud_registration.BUFFER_KeyptStageCriterion,
        'args': {},
    },
    'val_dataset': copy.deepcopy(val_data_cfg['val_dataset']),
    'val_dataloader': copy.deepcopy(val_data_cfg['val_dataloader']),
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': metrics.vision_3d.point_cloud_registration.BUFFER_KeyptStageMetric,
        'args': {},
    },
    # model config
    'model': copy.deepcopy(model_cfg),
    # optimizer config
    'optimizer': copy.deepcopy(optimizer_cfg),
    # scheduler config
    'scheduler': copy.deepcopy(scheduler_cfg),
},
{
    'stage': 'Inlier',
    'runner': runners.pcr_trainers.BufferTrainer,
    'work_dir': None,
    'epochs': 100,
    # seeds
    'init_seed': None,
    'train_seeds': None,
    # dataset config
    'train_dataset': copy.deepcopy(train_data_cfg['train_dataset']),
    'train_dataloader': copy.deepcopy(train_data_cfg['train_dataloader']),
    'criterion': {
        'class': criteria.vision_3d.point_cloud_registration.BUFFER_InlierStageCriterion,
        'args': {},
    },
    'val_dataset': copy.deepcopy(val_data_cfg['val_dataset']),
    'val_dataloader': copy.deepcopy(val_data_cfg['val_dataloader']),
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': metrics.vision_3d.point_cloud_registration.BUFFER_InlierStageMetric,
        'args': {},
    },
    # model config
    'model': copy.deepcopy(model_cfg),
    # optimizer config
    'optimizer': copy.deepcopy(optimizer_cfg),
    # scheduler config
    'scheduler': copy.deepcopy(scheduler_cfg),
},
]

config[0]['train_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 3)
config[1]['train_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)
config[2]['train_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)
config[3]['train_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)

config[0]['val_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 3)
config[1]['val_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)
config[2]['val_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)
config[3]['val_dataset']['args']['transforms_cfg'] = get_transforms_cfg('Euler', 1)

config[0]['model']['args']['config']['stage'] = 'Ref'
config[1]['model']['args']['config']['stage'] = 'Desc'
config[2]['model']['args']['config']['stage'] = 'Keypt'
config[3]['model']['args']['config']['stage'] = 'Inlier'

# seeds
config[0]['init_seed'] = 80195969
config[0]['train_seeds'] = [809274, 62485060, 96540230, 64524257, 33264354, 71764446, 55639057, 24415844, 7745877, 49413040, 45969112, 13307631, 24382693, 49442319, 84940414, 7027866, 49266045, 25549525, 83937391, 87742620, 11255859, 87736053, 34989614, 18450652, 55193495, 78499700, 66454563, 70548378, 35178048, 30838480, 5865139, 56461577, 83085157, 98179307, 91443930, 40536665, 67251420, 41177769, 62329198, 93442289, 7279298, 75782381, 81618193, 90264571, 52491812, 57430686, 75965969, 66295297, 64516372, 15054701, 21381327, 43164909, 16342863, 86158899, 52575885, 91123285, 14490001, 57510029, 43016640, 45829421, 92101562, 41407275, 81252176, 70838671, 26251354, 73365848, 43411004, 72022842, 95096936, 24270512, 98862406, 88035541, 12589415, 16925776, 67559576, 47222564, 68361900, 11485404, 58589324, 38995335, 64840773, 84296390, 57822536, 6265876, 53919804, 25387452, 30981893, 31139558, 13209986, 36848375, 51103524, 6371462, 29749318, 27832221, 38983930, 96568240, 89893911, 76899398, 9756944, 14878088]
config[1]['init_seed'] = 72742078
config[1]['train_seeds'] = [7007079, 63894426, 63438079, 32344911, 56255131, 95556723, 11402448, 80384810, 76540906, 29699671, 59387982, 82199914, 25361511, 75083209, 7443863, 53108330, 57458039, 50308866, 67996863, 3975877, 23691555, 50651071, 28401621, 8623501, 25574977, 68237632, 45165528, 61002367, 62643573, 45978677, 68050610, 19135567, 79295034, 58452684, 58573215, 66748621, 75969043, 83654984, 57471848, 5302915, 64870857, 2476996, 44411449, 75830289, 55406479, 77933999, 4895177, 40146648, 51394712, 664698, 90098857, 75881201, 38251161, 71299934, 82042248, 27310474, 52384247, 83993612, 99800272, 71560115, 86060119, 68007122, 49829172, 79218712, 8291676, 18724440, 78010703, 97035341, 10834630, 25266988, 27515163, 41126130, 16900884, 21382141, 69173010, 66734781, 51252353, 81281124, 17114945, 98481770, 77540426, 68514401, 39881307, 64683758, 89134364, 97377528, 1813251, 97182679, 3249041, 33696979, 46847013, 20974918, 38788880, 23244375, 5359141, 6356427, 51005845, 49630404, 77204494, 64148266]
config[2]['init_seed'] = 57268185
config[2]['train_seeds'] = [54662818, 24725465, 69205030, 86190205, 25566688, 61330167, 54909178, 46184617, 46489063, 36711080, 87165680, 73773117, 53069, 17324408, 90163729, 474063, 93366293, 76241119, 12327372, 49204310, 92444058, 46643040, 20522262, 69997043, 11838447, 7851587, 53193023, 77055977, 97092458, 83829800, 54521620, 19918772, 97125067, 83423157, 71323872, 96134046, 30699620, 95878795, 94028237, 67168607, 48467127, 23546550, 37431215, 49560177, 96044555, 96113795, 684867, 1326214, 2041524, 46771865, 92678397, 18398726, 64234120, 89483896, 78419939, 51955864, 37343971, 26948496, 65858194, 47600232, 2708361, 47566490, 45632743, 75898909, 20159922, 58059000, 24482044, 2190893, 21234689, 83379722, 62084270, 78762750, 72277421, 49054692, 96275431, 53293331, 9431741, 73857919, 21822902, 7365591, 31343636, 40884038, 44324517, 53363999, 69103011, 46751661, 17385737, 12721185, 26286002, 25603424, 90161631, 93817996, 34961297, 66829456, 47034198, 71404417, 73979851, 12265704, 80503215, 98276950]
config[3]['init_seed'] = 45549842
config[3]['train_seeds'] = [1119482, 83249176, 996554, 7906997, 62408641, 8309630, 52689321, 12443907, 16900430, 52074647, 18663868, 90685261, 3401549, 7826580, 3322381, 71722636, 36569071, 37674356, 24107202, 18207842, 83381562, 33044099, 51560931, 16767843, 10822137, 79965358, 43078212, 75921357, 23028916, 71979606, 82426268, 61722477, 73330032, 9406535, 93946845, 87591174, 78868051, 18932111, 53090786, 84269947, 20711934, 99631338, 29926997, 30084731, 68183243, 23319797, 16570382, 43131017, 25887596, 43263790, 92211932, 95732056, 28950846, 16201210, 13771040, 90742621, 50864886, 53734228, 41339459, 42959164, 81729907, 67077406, 88995003, 15315628, 91003373, 38534073, 85903279, 88334988, 96782457, 86170323, 46162184, 11580362, 51139878, 49442719, 36059939, 48873526, 28986086, 20247416, 87189407, 56841688, 51115184, 55309725, 98236890, 47664912, 10906972, 68988866, 1677082, 22825727, 77538909, 41496049, 62809264, 93322928, 94334590, 46190729, 66714938, 35315864, 38899388, 75239999, 31563798, 81695915]

# work dir
config[0]['work_dir'] = "./logs/benchmarks/point_cloud_registration/synth_pcr_0.5/BUFFER_run_2"
config[1]['work_dir'] = "./logs/benchmarks/point_cloud_registration/synth_pcr_0.5/BUFFER_run_2"
config[2]['work_dir'] = "./logs/benchmarks/point_cloud_registration/synth_pcr_0.5/BUFFER_run_2"
config[3]['work_dir'] = "./logs/benchmarks/point_cloud_registration/synth_pcr_0.5/BUFFER_run_2"
