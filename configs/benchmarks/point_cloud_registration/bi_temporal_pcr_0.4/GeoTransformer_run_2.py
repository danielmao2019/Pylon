# This file is automatically generated by `./configs/benchmarks/point_cloud_registration/gen.py`.
# Please do not attempt to modify manually.
from torch.optim.adam import Adam
from torch.optim.lr_scheduler import StepLR
from criteria.vision_3d.point_cloud_registration.geotransformer_criterion.geotransformer_criterion import GeoTransformerCriterion
from data.dataloaders.geotransformer_dataloader import GeoTransformerDataloader
from data.datasets.pcr_datasets.bi_temporal_pcr_dataset import BiTemporalPCRDataset
from data.transforms.compose import Compose
from data.transforms.vision_3d.clamp import Clamp
from metrics.vision_3d.point_cloud_registration.geotransformer_metric.geotransformer_metric import GeoTransformerMetric
from models.point_cloud_registration.geotransformer.geotransformer import GeoTransformer
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.supervised_single_task_trainer import SupervisedSingleTaskTrainer


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/point_cloud_registration/bi_temporal_pcr_0.4/GeoTransformer_run_2',
    'epochs': 100,
    'init_seed': 15504693,
    'train_seeds': [1405566, 4825636, 14571858, 4574800, 11891990, 86130235, 93028079, 71068250, 49907824, 38525386, 5686274, 39698287, 12228436, 70939918, 99267269, 54314785, 16155880, 17787318, 65072416, 24212870, 55361765, 70758527, 62503912, 20482218, 78181112, 38497451, 29242643, 25574523, 40286573, 94827752, 68849266, 10946244, 13028367, 1322909, 26110703, 18713758, 30222833, 35215891, 33419943, 11556671, 65762128, 4669380, 74896490, 81903342, 7363247, 81454864, 12450709, 13492390, 5556392, 17821274, 63345459, 62611329, 65965862, 68741613, 46312555, 69372155, 37196866, 71600857, 99387241, 37779490, 39392298, 3444807, 12233816, 61045738, 30253023, 71459088, 19860776, 26538023, 90800895, 29424526, 60367108, 1820579, 89776608, 13062577, 85128611, 82011755, 73034177, 75874027, 56531573, 47435842, 92775084, 18494393, 10790830, 36725560, 45613192, 2531688, 93917118, 93415674, 26772396, 20930778, 80486271, 32487342, 65606851, 72299522, 60359980, 9062047, 84015184, 19554747, 11559237, 43565709],
    'val_seeds': [53322003, 65099319, 73535512, 7971571, 45190584, 7617835, 38928837, 11533919, 10162663, 49766710, 81902160, 50770929, 1981462, 49148290, 30178904, 3297198, 35137217, 58627250, 57672631, 46422596, 92762172, 81657039, 19579450, 17020152, 43487035, 3048139, 47172451, 48836526, 61653548, 24798551, 54306133, 13113442, 17244361, 67894786, 22172182, 5094831, 28081460, 32824292, 60953016, 98441041, 93765773, 94759108, 68729833, 376651, 18898959, 12740945, 53776261, 16383910, 91493498, 12040257, 20611514, 50057152, 26293948, 83446513, 82413170, 18709418, 33183533, 3117055, 41527955, 15409048, 99601193, 68792710, 69664251, 4759380, 54853472, 305394, 65680997, 89708737, 23173296, 32544305, 8950087, 20166282, 97948998, 44884934, 43015528, 61884808, 57179445, 43482603, 98714050, 85805863, 42447988, 78014203, 95585700, 99053447, 76950010, 64568394, 56576063, 23807594, 5749507, 25256070, 98282983, 7416834, 19960665, 22473246, 88152827, 92347223, 53426051, 32976624, 2181472, 78798872],
    'test_seed': 31757077,
    'train_dataset': {
        'class': BiTemporalPCRDataset,
        'args': {
            'data_root': './data/datasets/soft_links/ivision-pcr-data',
            'gt_transforms': './data/datasets/soft_links/ivision-pcr-data/gt_transforms.json',
            'cache_filepath': './data/datasets/soft_links/ivision-pcr-data/../bi_temporal_pcr_cache.json',
            'split': 'train',
            'dataset_size': 5000,
            'rotation_mag': 45.0,
            'translation_mag': 0.5,
            'matching_radius': 0.05,
            'overlap_range': (0.0, 1.0),
            'min_points': 512,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [{
    'op': {
        'class': Clamp,
        'args': {
            'max_points': 4096,
        },
    },
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc')],
}],
                },
            },
            'overlap': 0.4,
        },
    },
    'train_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'criterion': {
        'class': GeoTransformerCriterion,
        'args': {
            'loss': {
                'weight_coarse_loss': 1.0,
                'weight_fine_loss': 1.0,
            },
            'coarse_loss': {
                'positive_margin': 0.1,
                'negative_margin': 1.4,
                'positive_optimal': 0.1,
                'negative_optimal': 1.4,
                'log_scale': 24,
                'positive_overlap': 0.1,
            },
            'fine_loss': {
                'positive_radius': 0.05,
            },
        },
    },
    'val_dataset': {
        'class': BiTemporalPCRDataset,
        'args': {
            'data_root': './data/datasets/soft_links/ivision-pcr-data',
            'gt_transforms': './data/datasets/soft_links/ivision-pcr-data/gt_transforms.json',
            'cache_filepath': './data/datasets/soft_links/ivision-pcr-data/../bi_temporal_pcr_cache.json',
            'split': 'val',
            'dataset_size': 1000,
            'rotation_mag': 45.0,
            'translation_mag': 0.5,
            'matching_radius': 0.05,
            'overlap_range': (0.0, 1.0),
            'min_points': 512,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [{
    'op': {
        'class': Clamp,
        'args': {
            'max_points': 4096,
        },
    },
    'input_names': [('inputs', 'src_pc'), ('inputs', 'tgt_pc')],
}],
                },
            },
            'overlap': 0.4,
        },
    },
    'val_dataloader': {
        'class': GeoTransformerDataloader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'num_stages': 4,
            'voxel_size': 0.1,
            'search_radius': 0.25,
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': GeoTransformerMetric,
        'args': {
            'acceptance_overlap': 0.0,
            'acceptance_radius': 0.1,
            'inlier_ratio_threshold': 0.05,
            'rmse_threshold': 0.2,
            'rre_threshold': 15.0,
            'rte_threshold': 0.3,
        },
    },
    'model': {
        'class': GeoTransformer,
        'args': {
            'model': {
                'ground_truth_matching_radius': 0.05,
                'num_points_in_patch': 32,
                'num_sinkhorn_iterations': 100,
            },
            'backbone': {
                'num_stages': 4,
                'init_voxel_size': 0.025,
                'kernel_size': 15,
                'base_radius': 2.5,
                'base_sigma': 2.0,
                'init_radius': 0.0625,
                'init_sigma': 0.05,
                'group_norm': 32,
                'input_dim': 1,
                'init_dim': 64,
                'output_dim': 256,
            },
            'geotransformer': {
                'input_dim': 1024,
                'hidden_dim': 256,
                'output_dim': 256,
                'num_heads': 4,
                'blocks': ['self', 'cross', 'self', 'cross', 'self', 'cross'],
                'sigma_d': 0.2,
                'sigma_a': 15,
                'angle_k': 3,
                'reduction_a': 'max',
            },
            'coarse_matching': {
                'num_targets': 128,
                'overlap_threshold': 0.1,
                'num_correspondences': 256,
                'dual_normalization': True,
            },
            'fine_matching': {
                'topk': 3,
                'acceptance_radius': 0.1,
                'mutual': True,
                'confidence_threshold': 0.05,
                'use_dustbin': False,
                'use_global_score': False,
                'correspondence_threshold': 3,
                'correspondence_limit': None,
                'num_refinement_steps': 5,
            },
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': Adam,
                'args': {
                    'params': None,
                    'lr': 0.0001,
                    'weight_decay': 1e-06,
                },
            },
        },
    },
    'scheduler': {
        'class': StepLR,
        'args': {
            'optimizer': None,
            'step_size': 1000,
            'gamma': 0.95,
        },
    },
}
