# This file is automatically generated by `./configs/benchmarks/change_detection/gen_bi_temporal.py`.
# Please do not attempt to modify manually.
from configs.common.datasets.change_detection.val._transforms_cfg import transforms_cfg
from torch import Tensor
from torch.optim.lr_scheduler import PolynomialLR
from torch.optim.sgd import SGD
from torch.utils.data.dataloader import DataLoader
from torchvision.transforms.transforms import ColorJitter
from criteria.vision_2d.change_detection.dsamnet_criterion import DSAMNetCriterion
from data.collators.base_collator import BaseCollator
from data.datasets.change_detection_datasets.bi_temporal.cdd_dataset import CDDDataset
from data.transforms.compose import Compose
from data.transforms.randomize import Randomize
from data.transforms.vision_2d.crop.random_crop import RandomCrop
from data.transforms.vision_2d.flip import Flip
from data.transforms.vision_2d.random_rotation import RandomRotation
from metrics.vision_2d.semantic_segmentation_metric import SemanticSegmentationMetric
from models.change_detection.dsamnet.dsamnet import DSAMNet
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.supervised_single_task_trainer import SupervisedSingleTaskTrainer


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/change_detection/cdd/DSAMNet_run_1',
    'epochs': 100,
    'init_seed': 52377982,
    'train_seeds': [52410969, 3137211, 69072226, 26238014, 98150551, 19287910, 18586223, 71141904, 8591368, 41567551, 74334406, 94004061, 32866580, 24271810, 44578949, 48272886, 78092346, 67387663, 35473977, 55378317, 94153854, 36524544, 34950140, 58832553, 43496583, 75144282, 69499412, 35914963, 11177090, 91123194, 81423362, 39731206, 79672227, 79040029, 78269964, 26309425, 74535021, 84474146, 59964722, 39832880, 20521224, 1081563, 99303628, 68735449, 53815048, 82203525, 3346586, 68368795, 31980160, 16128393, 73683514, 24152205, 99144767, 54723984, 96322642, 45945187, 81915923, 47890632, 59585249, 91383757, 89242156, 88081900, 6277226, 94239477, 55626187, 91543834, 75872885, 26555072, 16294235, 40772412, 48035013, 50417261, 33334329, 99326147, 81971675, 68635084, 63705598, 67891143, 7603932, 3589544, 99872093, 94333452, 35323863, 25804949, 14620732, 34345883, 95075305, 27973705, 56411261, 95609062, 13641950, 42735585, 77956496, 5576881, 25923868, 3523033, 44873082, 90411625, 3720289, 41199846],
    'val_seeds': [39523079, 42382680, 87264742, 26094184, 2265915, 28118318, 157371, 51961968, 79489708, 92753442, 42121689, 86386289, 76374234, 98219646, 26125770, 27543488, 64239602, 88019604, 27663279, 66601010, 77702564, 86098655, 61670378, 7321351, 45051643, 83611877, 22658735, 94637483, 48541078, 70700819, 95282469, 67005683, 55992376, 35237093, 27219373, 14787431, 63488220, 19355182, 93483710, 8742432, 43520702, 19136805, 12781978, 75164966, 58943224, 61008537, 21734515, 78273646, 53648969, 20110621, 89532515, 71960099, 3508860, 67902889, 37642152, 48093706, 36487119, 69672502, 2763397, 39188686, 27139720, 60803349, 87568112, 71782319, 3983566, 51997108, 34633064, 49431986, 97388848, 87976497, 42855313, 55638564, 2621972, 95492174, 63949125, 87234888, 14299383, 64710945, 75693396, 54945524, 88549460, 2560266, 71692030, 67319234, 61192330, 87266678, 67233657, 66122779, 75192565, 66056334, 84504411, 88464756, 26774067, 67718825, 89810619, 42629240, 23251669, 86776409, 74451555, 13050667],
    'test_seed': 98177082,
    'train_dataset': {
        'class': CDDDataset,
        'args': {
            'data_root': './data/datasets/soft_links/CDD',
            'split': 'train',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (256, 256),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 4,
            'num_workers': 4,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {
                        'meta_info': {
                            'image_resolution': Tensor,
                        },
                    },
                },
            },
        },
    },
    'criterion': {
        'class': DSAMNetCriterion,
        'args': {
            'dice_weight': 0.1,
        },
    },
    'val_dataset': {
        'class': CDDDataset,
        'args': {
            'data_root': './data/datasets/soft_links/CDD',
            'split': 'val',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (256, 256),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
        },
    },
    'val_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {
                        'meta_info': {
                            'image_resolution': Tensor,
                        },
                    },
                },
            },
        },
    },
    'test_dataset': {
        'class': CDDDataset,
        'args': {
            'data_root': './data/datasets/soft_links/CDD',
            'split': 'test',
            'transforms_cfg': transforms_cfg,
        },
    },
    'test_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {
                        'meta_info': {
                            'image_resolution': Tensor,
                        },
                    },
                },
            },
        },
    },
    'metric': {
        'class': SemanticSegmentationMetric,
        'args': {
            'num_classes': 2,
        },
    },
    'model': {
        'class': DSAMNet,
        'args': {},
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': SGD,
                'args': {
                    'lr': 0.001,
                    'momentum': 0.9,
                    'weight_decay': 0.0001,
                },
            },
        },
    },
    'scheduler': {
        'class': PolynomialLR,
        'args': {
            'optimizer': None,
            'total_iters': None,
            'power': 0.9,
        },
    },
}
