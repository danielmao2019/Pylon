# This file is automatically generated by `./configs/benchmarks/change_detection/gen_ppsl.py`.
# Please do not attempt to modify manually.
from builtins import list
from torch import Tensor
from torch.optim.lr_scheduler import PolynomialLR
from torch.optim.sgd import SGD
from torch.utils.data.dataloader import DataLoader
from torchvision.transforms.transforms import ColorJitter
from criteria.vision_2d.change_detection.ppsl_criterion import PPSLCriterion
from data.collators.base_collator import BaseCollator
from data.datasets.change_detection_datasets.bi_temporal.air_change_dataset import AirChangeDataset
from data.datasets.change_detection_datasets.bi_temporal.cdd_dataset import CDDDataset
from data.datasets.change_detection_datasets.bi_temporal.levir_cd_dataset import LevirCdDataset
from data.datasets.change_detection_datasets.bi_temporal.oscd_dataset import OSCDDataset
from data.datasets.change_detection_datasets.bi_temporal.sysu_cd_dataset import SYSU_CD_Dataset
from data.datasets.change_detection_datasets.single_temporal.ppsl_dataset import PPSLDataset
from data.datasets.semantic_segmentation_datasets.whu_bd_dataset import WHU_BD_Dataset
from data.transforms.compose import Compose
from data.transforms.randomize import Randomize
from data.transforms.vision_2d.crop.random_crop import RandomCrop
from data.transforms.vision_2d.flip import Flip
from data.transforms.vision_2d.random_rotation import RandomRotation
from metrics.vision_2d.semantic_segmentation_metric import SemanticSegmentationMetric
from models.change_detection.ppsl.ppsl_model import PPSLModel
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.multi_val_dataset_trainer import MultiValDatasetTrainer


config = {
    'runner': MultiValDatasetTrainer,
    'work_dir': './logs/benchmarks/change_detection/ppsl/whu_bd_run_0',
    'epochs': 100,
    'init_seed': 721706,
    'train_seeds': [97190565, 37839619, 72783241, 14452738, 88946957, 12642462, 25007959, 19411220, 7180454, 85811380, 12777773, 77215714, 2196307, 59482992, 42111792, 67654743, 27120342, 17669299, 19815221, 14439194, 8718643, 51235403, 65636337, 55948959, 49355797, 33691763, 42186224, 77372365, 13924011, 82177558, 65421353, 6704185, 30617250, 28018020, 11820162, 31446434, 34908710, 16831040, 89161262, 33650618, 80758250, 33984180, 55433688, 74168035, 21921181, 32152281, 85056310, 34640911, 68823397, 28876895, 10033977, 6279513, 48588704, 7150559, 2128324, 88387895, 69603913, 91360125, 33358273, 36966934, 40733940, 56935656, 19071256, 5333506, 59170535, 54411135, 88017599, 47314099, 83203667, 66263089, 95344339, 35474680, 31124027, 99042769, 60466024, 37698980, 25865650, 53525534, 81997557, 56487483, 77008927, 38710547, 53032090, 17839520, 33936021, 25853454, 47839461, 65010720, 43463608, 6071066, 62123900, 56814820, 97760070, 86481759, 15431590, 16494036, 62290798, 9159162, 6484705, 66805122],
    'val_seeds': [65318705, 80342550, 84634273, 93906328, 18978532, 7557947, 36201240, 66021320, 41149465, 586020, 98109596, 20431161, 37903498, 28795958, 10357371, 87364072, 94065536, 23481819, 88712155, 10038114, 64666056, 56849522, 22629430, 98985783, 85921108, 13150807, 59590416, 2077435, 50733378, 44793882, 71926949, 86152886, 2411554, 46865587, 68742018, 76676681, 63644217, 60315422, 46521800, 35085350, 313954, 83151977, 86540084, 18613779, 36256621, 55090937, 38050391, 92535279, 97169507, 97946513, 87605441, 76327575, 13105139, 10741590, 19523803, 13241681, 18934132, 84371342, 70863662, 37010312, 22503240, 96844855, 12778633, 10186772, 99225828, 79755058, 14081166, 78033737, 2600168, 13846139, 40452505, 33754257, 22895418, 63285915, 77546561, 89974950, 67653071, 98009291, 54266302, 62836922, 16199627, 32626859, 97042902, 75674312, 47751483, 93663075, 63544653, 59611828, 84675030, 51622761, 54157366, 82123130, 11155362, 24538369, 89616644, 32072981, 98442984, 45863177, 74569389, 13819852],
    'test_seed': 68697224,
    'train_dataset': {
        'class': PPSLDataset,
        'args': {
            'source': {
                'class': WHU_BD_Dataset,
                'args': {
                    'data_root': './data/datasets/soft_links/WHU-BD',
                    'split': 'train',
                },
            },
            'dataset_size': 4736,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map'), ('labels', 'semantic_map')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map'), ('labels', 'semantic_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map'), ('labels', 'semantic_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map'), ('labels', 'semantic_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 128,
            'num_workers': 8,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {},
                },
            },
        },
    },
    'criterion': {
        'class': PPSLCriterion,
        'args': {},
    },
    'val_dataset': None,
    'val_dataloader': None,
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': SemanticSegmentationMetric,
        'args': {
            'num_classes': 2,
        },
    },
    'model': {
        'class': PPSLModel,
        'args': {},
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': SGD,
                'args': {
                    'lr': 0.001,
                    'momentum': 0.9,
                    'weight_decay': 0.0001,
                },
            },
        },
    },
    'scheduler': {
        'class': PolynomialLR,
        'args': {
            'optimizer': None,
            'total_iters': None,
            'power': 0.9,
        },
    },
    'val_datasets': [{
    'class': AirChangeDataset,
    'args': {
        'data_root': './data/datasets/soft_links/AirChange',
        'split': 'test',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (112, 112),
                'resize': (224, 224),
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': CDDDataset,
    'args': {
        'data_root': './data/datasets/soft_links/CDD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': LevirCdDataset,
    'args': {
        'data_root': './data/datasets/soft_links/LEVIR-CD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': OSCDDataset,
    'args': {
        'data_root': './data/datasets/soft_links/OSCD',
        'split': 'test',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
        'bands': None,
    },
}, {
    'class': SYSU_CD_Dataset,
    'args': {
        'data_root': './data/datasets/soft_links/SYSU-CD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}],
    'val_dataloaders': [{
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_size': Tensor,
                        'crop_loc': Tensor,
                        'crop_size': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_resolution': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_resolution': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'date_1': list,
                        'date_2': list,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {},
            },
        },
    },
}],
}
