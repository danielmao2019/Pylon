# This file is automatically generated by `./configs/benchmarks/change_detection/gen_bi_temporal.py`.
# Please do not attempt to modify manually.
from builtins import list
from torch.optim.adam import Adam
from torch.optim.lr_scheduler import LambdaLR
from torch.utils.data.dataloader import DataLoader
from torchvision.transforms.transforms import ColorJitter
from criteria.vision_2d.change_detection.csa_cdgan_criterion import CSA_CDGAN_Criterion
from data.collators.base_collator import BaseCollator
from data.datasets.change_detection_datasets.bi_temporal.oscd_dataset import OSCDDataset
from data.transforms.compose import Compose
from data.transforms.randomize import Randomize
from data.transforms.torchvision_wrapper import TorchvisionWrapper
from data.transforms.vision_2d.crop.random_crop import RandomCrop
from data.transforms.vision_2d.flip import Flip
from data.transforms.vision_2d.random_rotation import RandomRotation
from metrics.vision_2d.semantic_segmentation_metric import SemanticSegmentationMetric
from models.change_detection.csa_cdgan.discriminator import CSA_CDGAN_Discriminator
from models.change_detection.csa_cdgan.generator import CSA_CDGAN_Generator
from models.change_detection.csa_cdgan.model import CSA_CDGAN
from optimizers.single_task_optimizer import SingleTaskOptimizer
from optimizers.wrappers.multi_part_optimizer import MultiPartOptimizer
from runners.gan_trainers.csa_cdgan_trainer import CSA_CDGAN_Trainer
from schedulers.lr_lambdas.constant import ConstantLambda
from schedulers.wrappers.multi_part_scheduler import MultiPartScheduler


config = {
    'runner': CSA_CDGAN_Trainer,
    'work_dir': './logs/benchmarks/change_detection/oscd/CSA_CDGAN_run_1',
    'epochs': 100,
    'init_seed': 88646444,
    'train_seeds': [2890645, 44973035, 39062169, 15415284, 53783486, 79018078, 17028550, 26234898, 51340955, 25221020, 97328543, 99655111, 70094698, 38929997, 95020421, 59260395, 56172943, 14920441, 77741169, 79329110, 36357611, 57576068, 40359852, 2498582, 66264750, 46552952, 29239796, 95505694, 89172794, 53582771, 23716142, 53964425, 34794513, 27027531, 63362534, 66020823, 71526587, 49477887, 69558377, 788428, 53810777, 55121292, 18899028, 85192642, 11967559, 40266442, 10142500, 47815406, 44599409, 44422491, 3322748, 47743301, 70362738, 95132495, 4545035, 96421720, 24953064, 52640226, 43679169, 78020891, 13629625, 25570592, 50412630, 99045171, 40871245, 87996871, 64396875, 89901865, 45774442, 22649156, 73014767, 10697956, 92497161, 56383242, 60367643, 9119022, 4818139, 98483474, 13239871, 36722232, 51371534, 25787650, 49697988, 36168125, 53991137, 27414962, 25619605, 22326976, 82504362, 44544040, 81429776, 77093936, 90897336, 88544230, 75531791, 76321035, 66387459, 40079457, 30247028, 44936036],
    'val_seeds': [83910389, 21648475, 62754152, 51230408, 18751178, 23429618, 23388299, 62813358, 7451028, 83417534, 4067419, 66854263, 81220229, 77181656, 52740876, 33872490, 10898525, 40234848, 7922111, 89030027, 51383354, 78702756, 56160113, 72087251, 49084383, 62271313, 89907240, 65186898, 30285858, 42987531, 53373946, 30563808, 13600084, 74053700, 15035191, 28461297, 4109185, 99019323, 33897478, 28119435, 57703854, 90859188, 57320495, 87807938, 55341874, 32508797, 79823403, 98599177, 52510439, 11742686, 42466004, 36916981, 9125613, 98322190, 84985348, 92393387, 55029169, 73406347, 77588659, 40042745, 85888601, 79813141, 86557206, 12859986, 6941996, 99160419, 69850941, 43290000, 23888393, 93587647, 62940563, 99839264, 8373962, 99756034, 19290675, 92377658, 53895241, 46902859, 15738379, 15214428, 12478059, 53164508, 88717354, 96911832, 34503716, 36305271, 11876396, 39983200, 18714208, 14327251, 85472096, 85725188, 97573654, 71528469, 8728888, 26893314, 58799555, 87266004, 56590552, 1179979],
    'test_seed': 64656776,
    'train_dataset': {
        'class': OSCDDataset,
        'args': {
            'data_root': './data/datasets/soft_links/OSCD',
            'split': 'train',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': TorchvisionWrapper,
                    'args': {
                        'transform_class': ColorJitter,
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': TorchvisionWrapper,
                    'args': {
                        'transform_class': ColorJitter,
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
            'bands': None,
        },
    },
    'train_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 4,
            'num_workers': 4,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {
                        'meta_info': {
                            'date_1': list,
                            'date_2': list,
                        },
                    },
                },
            },
        },
    },
    'criterion': {
        'class': CSA_CDGAN_Criterion,
        'args': {},
    },
    'val_dataset': {
        'class': OSCDDataset,
        'args': {
            'data_root': './data/datasets/soft_links/OSCD',
            'split': 'test',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
                },
            },
            'bands': None,
        },
    },
    'val_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {
                        'meta_info': {
                            'date_1': list,
                            'date_2': list,
                        },
                    },
                },
            },
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': SemanticSegmentationMetric,
        'args': {
            'num_classes': 2,
        },
    },
    'model': {
        'class': CSA_CDGAN,
        'args': {
            'generator_cfg': {
                'class': CSA_CDGAN_Generator,
                'args': {
                    'isize': 256,
                    'nc': 6,
                    'nz': 100,
                    'ndf': 64,
                    'n_extra_layers': 3,
                },
            },
            'discriminator_cfg': {
                'class': CSA_CDGAN_Discriminator,
                'args': {
                    'isize': 256,
                    'nc': 2,
                    'nz': 1,
                    'ndf': 64,
                    'n_extra_layers': 3,
                },
            },
        },
    },
    'optimizer': {
        'class': MultiPartOptimizer,
        'args': {
            'optimizer_cfgs': {
                'generator': {
                    'class': SingleTaskOptimizer,
                    'args': {
                        'optimizer_config': {
                            'class': Adam,
                            'args': {
                                'lr': 0.0001,
                            },
                        },
                    },
                },
                'discriminator': {
                    'class': SingleTaskOptimizer,
                    'args': {
                        'optimizer_config': {
                            'class': Adam,
                            'args': {
                                'lr': 0.0001,
                            },
                        },
                    },
                },
            },
        },
    },
    'scheduler': {
        'class': MultiPartScheduler,
        'args': {
            'scheduler_cfgs': {
                'generator': {
                    'class': LambdaLR,
                    'args': {
                        'lr_lambda': {
                            'class': ConstantLambda,
                            'args': {},
                        },
                    },
                },
                'discriminator': {
                    'class': LambdaLR,
                    'args': {
                        'lr_lambda': {
                            'class': ConstantLambda,
                            'args': {},
                        },
                    },
                },
            },
        },
    },
}
