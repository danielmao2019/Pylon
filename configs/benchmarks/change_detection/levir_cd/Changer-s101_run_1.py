# This file is automatically generated by `./configs/benchmarks/change_detection/gen_bi_temporal.py`.
# Please do not attempt to modify manually.
from configs.common.datasets.change_detection.val._transforms_cfg import transforms_cfg
from torch import Tensor
from torch.optim.lr_scheduler import PolynomialLR
from torch.optim.sgd import SGD
from torch.utils.data.dataloader import DataLoader
from torchvision.transforms.transforms import ColorJitter
from criteria.vision_2d.dense_prediction.dense_classification.focal_dice_loss import FocalDiceLoss
from data.collators.base_collator import BaseCollator
from data.datasets.change_detection_datasets.bi_temporal.levir_cd_dataset import LevirCdDataset
from data.transforms.compose import Compose
from data.transforms.randomize import Randomize
from data.transforms.vision_2d.crop.random_crop import RandomCrop
from data.transforms.vision_2d.flip import Flip
from data.transforms.vision_2d.random_rotation import RandomRotation
from metrics.vision_2d.semantic_segmentation_metric import SemanticSegmentationMetric
from models.change_detection.changer.changer_model import Changer
from models.change_detection.changer.modules.changer_decoder import ChangerDecoder
from models.change_detection.changer.modules.interaction_layer import ChannelExchange, SpatialExchange
from models.change_detection.changer.modules.interaction_resnest import IA_ResNeSt
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.supervised_single_task_trainer import SupervisedSingleTaskTrainer


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/change_detection/levir_cd/Changer-s101_run_1',
    'epochs': 100,
    'init_seed': 53780356,
    'train_seeds': [5569849, 82328099, 5597916, 70030952, 99497390, 99098744, 74885352, 20683546, 13591608, 72191662, 3272833, 80916139, 74905206, 53928306, 79788757, 53995598, 26237029, 65838202, 99025918, 22716499, 69271253, 18269124, 26768779, 12515838, 81728971, 24750982, 83833226, 65566742, 76881702, 47732446, 64856856, 41539180, 24407878, 53097334, 24291176, 33802476, 82922494, 89971439, 60046185, 74811023, 54862724, 2466609, 18195327, 80657505, 76143272, 31970912, 75846732, 62243162, 20189395, 67282438, 63828836, 58761168, 51965258, 32266951, 564656, 98773742, 83318734, 66730480, 82727911, 84841810, 50233208, 23883315, 5986891, 94123242, 35771968, 74857225, 72198316, 76190939, 9751039, 39456232, 77809181, 46792351, 40504242, 11976976, 7297219, 55887124, 98794916, 56161024, 10241285, 5345360, 67595801, 66593584, 79132876, 7787730, 47993453, 87764662, 70888281, 44122758, 10470779, 11556410, 14974429, 40359499, 32400243, 39286558, 85160016, 69615203, 34092117, 46165755, 18549935, 27125313],
    'val_seeds': [87390513, 5360308, 58171540, 22685190, 12490088, 50498753, 58945795, 39501055, 41554454, 43550271, 3725922, 15715374, 35519627, 37319353, 32871109, 36093155, 17556405, 36997018, 89285150, 73791742, 94933483, 45623127, 5808616, 51211592, 93805174, 6532, 57202281, 143374, 51537858, 37277083, 81760394, 22469213, 25352735, 78300153, 25268434, 72261779, 14055576, 95169969, 21584152, 88802947, 98807137, 21678802, 72497019, 42171264, 34119865, 74245961, 93648438, 4830659, 79645623, 26226222, 82030860, 36169427, 20125682, 17146765, 82663760, 19821070, 46301071, 41535374, 30211610, 95882802, 93739017, 21330205, 288134, 10156032, 49235799, 67579579, 93398780, 85865045, 90072668, 79703837, 94705235, 91754881, 24399127, 42278773, 85105914, 10817358, 35148065, 65439546, 18213538, 95068989, 46048811, 32507166, 87682572, 26695967, 31406608, 63372656, 11182464, 8891416, 23888880, 355518, 88079149, 16707095, 7562916, 81026282, 48366620, 70152463, 46530313, 92697451, 81211723, 6388069],
    'test_seed': 63374035,
    'train_dataset': {
        'class': LevirCdDataset,
        'args': {
            'data_root': './data/datasets/soft_links/LEVIR-CD',
            'split': 'train',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (256, 256),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 4,
            'num_workers': 4,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {
                        'meta_info': {
                            'image_resolution': Tensor,
                        },
                    },
                },
            },
        },
    },
    'criterion': {
        'class': FocalDiceLoss,
        'args': {
            'class_weights': (0.09177704155445099, 1.908223032951355),
            'use_buffer': False,
        },
    },
    'val_dataset': {
        'class': LevirCdDataset,
        'args': {
            'data_root': './data/datasets/soft_links/LEVIR-CD',
            'split': 'val',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (256, 256),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
        },
    },
    'val_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {
                        'meta_info': {
                            'image_resolution': Tensor,
                        },
                    },
                },
            },
        },
    },
    'test_dataset': {
        'class': LevirCdDataset,
        'args': {
            'data_root': './data/datasets/soft_links/LEVIR-CD',
            'split': 'test',
            'transforms_cfg': transforms_cfg,
        },
    },
    'test_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {
                        'meta_info': {
                            'image_resolution': Tensor,
                        },
                    },
                },
            },
        },
    },
    'metric': {
        'class': SemanticSegmentationMetric,
        'args': {
            'num_classes': 2,
        },
    },
    'model': {
        'class': Changer,
        'args': {
            'encoder_cfg': {
                'class': IA_ResNeSt,
                'args': {
                    'depth': 101,
                    'num_stages': 4,
                    'out_indices': (0, 1, 2, 3),
                    'dilations': (1, 1, 1, 1),
                    'strides': (1, 2, 2, 2),
                    'norm_cfg': {
                        'type': 'SyncBN',
                        'requires_grad': True,
                    },
                    'norm_eval': False,
                    'style': 'pytorch',
                    'contract_dilation': True,
                    'stem_channels': 128,
                    'radix': 2,
                    'reduction_factor': 4,
                    'avg_down_stride': True,
                    'interaction_cfg': (
                        None,
                        {
                                                    'class': SpatialExchange,
                                                    'args': {
                                                        'p': 0.5,
                                                    },
                                                },
                        {
                                                    'class': ChannelExchange,
                                                    'args': {
                                                        'p': 0.5,
                                                    },
                                                },
                        {
                                                    'class': ChannelExchange,
                                                    'args': {
                                                        'p': 0.5,
                                                    },
                                                }
                    ),
                },
            },
            'decoder_cfg': {
                'class': ChangerDecoder,
                'args': {
                    'in_index': [0, 1, 2, 3],
                    'dropout_ratio': 0.1,
                    'num_classes': 2,
                    'norm_cfg': {
                        'type': 'SyncBN',
                        'requires_grad': True,
                    },
                    'align_corners': False,
                    'in_channels': [256, 512, 1024, 2048],
                    'channels': 256,
                    'sampler': {
                        'type': 'mmseg.OHEMPixelSampler',
                        'thresh': 0.7,
                        'min_kept': 100000,
                    },
                },
            },
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': SGD,
                'args': {
                    'lr': 0.001,
                    'momentum': 0.9,
                    'weight_decay': 0.0001,
                },
            },
        },
    },
    'scheduler': {
        'class': PolynomialLR,
        'args': {
            'optimizer': None,
            'total_iters': None,
            'power': 0.9,
        },
    },
}
