# This file is automatically generated by `./configs/benchmarks/change_detection/gen_i3pe.py`.
# Please do not attempt to modify manually.
from builtins import list
from torch import Tensor
from torch.optim.lr_scheduler import PolynomialLR
from torch.optim.sgd import SGD
from torch.utils.data.dataloader import DataLoader
from torchvision.transforms.transforms import ColorJitter
from criteria.vision_2d.change_detection.symmetric_change_detection_criterion import SymmetricChangeDetectionCriterion
from data.collators.base_collator import BaseCollator
from data.datasets.change_detection_datasets.bi_temporal.air_change_dataset import AirChangeDataset
from data.datasets.change_detection_datasets.bi_temporal.cdd_dataset import CDDDataset
from data.datasets.change_detection_datasets.bi_temporal.levir_cd_dataset import LevirCdDataset
from data.datasets.change_detection_datasets.bi_temporal.oscd_dataset import OSCDDataset
from data.datasets.change_detection_datasets.bi_temporal.sysu_cd_dataset import SYSU_CD_Dataset
from data.datasets.change_detection_datasets.single_temporal.i3pe_dataset import I3PEDataset
from data.transforms.compose import Compose
from data.transforms.randomize import Randomize
from data.transforms.vision_2d.crop.random_crop import RandomCrop
from data.transforms.vision_2d.flip import Flip
from data.transforms.vision_2d.random_rotation import RandomRotation
from metrics.vision_2d.semantic_segmentation_metric import SemanticSegmentationMetric
from models.change_detection.i3pe.i3pe_model import I3PEModel
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.multi_val_dataset_trainer import MultiValDatasetTrainer


config = {
    'runner': MultiValDatasetTrainer,
    'work_dir': './logs/benchmarks/change_detection/i3pe/sysu_cd_run_1',
    'epochs': 100,
    'init_seed': 19128160,
    'train_seeds': [43473712, 20227639, 53609980, 57487025, 40529993, 35558183, 96837917, 98726945, 13406634, 97449195, 5250072, 55120211, 33373004, 32406570, 73970754, 51586494, 37008475, 20769675, 73667080, 75462102, 89254368, 35069660, 88004427, 27889147, 74983281, 62415307, 97358013, 11459247, 26050777, 41650093, 32078254, 58367892, 36821605, 91211417, 95068066, 13821482, 54495261, 41455438, 72859046, 50355566, 45717092, 16244414, 45044515, 70206378, 25577115, 53952342, 79118277, 15118218, 57289140, 66622195, 41863565, 14041170, 81753171, 85791439, 78272399, 42266226, 58384630, 33170414, 75873976, 60327673, 3555875, 19890909, 11294585, 73761896, 87949438, 858577, 36552179, 43437966, 41061525, 26270099, 87992948, 98502868, 16201834, 96874994, 85800806, 76797547, 63152489, 95682304, 32290144, 78950608, 35648105, 10490945, 5688017, 93527822, 82137586, 65229465, 95377042, 62587275, 17465897, 29016272, 66821422, 53664319, 69729820, 80734649, 41632044, 64934404, 61104571, 3803761, 45607100, 14794558],
    'val_seeds': [6385228, 12575619, 42816225, 22233991, 49833696, 17112584, 45024726, 9030533, 69112945, 37808745, 94560727, 17203773, 898625, 16365565, 36015986, 96024754, 65535786, 87685314, 63962682, 65921855, 37132973, 52081768, 74827988, 45853996, 86080450, 69175585, 56300438, 71820583, 31207718, 73098917, 79748322, 25810993, 18198766, 11201397, 23698930, 50151883, 63961493, 85037438, 32877627, 61588800, 85176227, 29867878, 38499250, 30201486, 2334090, 68481694, 16453563, 12157942, 29728289, 20084956, 69810134, 16831976, 98392555, 84684646, 49368406, 90026790, 10978096, 46176466, 27233062, 73858991, 68675097, 26430442, 37099047, 3183844, 17299608, 91738108, 5510899, 39449327, 5296160, 73917481, 10731122, 65748420, 84865217, 9635439, 49762631, 87850720, 31843727, 4957079, 2938609, 16717813, 88955546, 19525209, 17499319, 4446411, 2990527, 80293618, 78616016, 6214972, 89025131, 6162990, 36795942, 53968613, 90050981, 16021546, 54658091, 21325129, 4736656, 29683655, 39402335, 5310399],
    'test_seed': 52147023,
    'train_dataset': {
        'class': I3PEDataset,
        'args': {
            'source': <data.datasets.change_detection_datasets.single_temporal.bi2single_temporal_dataset.Bi2SingleTemporal object at 0x7fe8fd45dbd0>,
            'dataset_size': 24000,
            'exchange_ratio': 0.75,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 128,
            'num_workers': 8,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {},
                },
            },
        },
    },
    'criterion': {
        'class': SymmetricChangeDetectionCriterion,
        'args': {
            'class_weights': (0.4268217980861664, 1.5731782913208008),
        },
    },
    'val_dataset': None,
    'val_dataloader': None,
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': SemanticSegmentationMetric,
        'args': {
            'num_classes': 2,
        },
    },
    'model': {
        'class': I3PEModel,
        'args': {},
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': SGD,
                'args': {
                    'lr': 0.001,
                    'momentum': 0.9,
                    'weight_decay': 0.0001,
                },
            },
        },
    },
    'scheduler': {
        'class': PolynomialLR,
        'args': {
            'optimizer': None,
            'total_iters': None,
            'power': 0.9,
        },
    },
    'val_datasets': [{
    'class': AirChangeDataset,
    'args': {
        'data_root': './data/datasets/soft_links/AirChange',
        'split': 'test',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (112, 112),
                'resize': (224, 224),
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': CDDDataset,
    'args': {
        'data_root': './data/datasets/soft_links/CDD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': LevirCdDataset,
    'args': {
        'data_root': './data/datasets/soft_links/LEVIR-CD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': OSCDDataset,
    'args': {
        'data_root': './data/datasets/soft_links/OSCD',
        'split': 'test',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
        'bands': None,
    },
}, {
    'class': SYSU_CD_Dataset,
    'args': {
        'data_root': './data/datasets/soft_links/SYSU-CD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}],
    'val_dataloaders': [{
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_size': Tensor,
                        'crop_loc': Tensor,
                        'crop_size': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_resolution': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_resolution': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'date_1': list,
                        'date_2': list,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {},
            },
        },
    },
}],
}
