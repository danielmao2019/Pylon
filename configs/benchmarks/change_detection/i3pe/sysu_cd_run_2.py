# This file is automatically generated by `./configs/benchmarks/change_detection/gen_i3pe.py`.
# Please do not attempt to modify manually.
from builtins import list
from torch import Tensor
from torch.optim.lr_scheduler import PolynomialLR
from torch.optim.sgd import SGD
from torch.utils.data.dataloader import DataLoader
from torchvision.transforms.transforms import ColorJitter
from criteria.vision_2d.change_detection.symmetric_change_detection_criterion import SymmetricChangeDetectionCriterion
from data.collators.base_collator import BaseCollator
from data.datasets.change_detection_datasets.bi_temporal.air_change_dataset import AirChangeDataset
from data.datasets.change_detection_datasets.bi_temporal.cdd_dataset import CDDDataset
from data.datasets.change_detection_datasets.bi_temporal.levir_cd_dataset import LevirCdDataset
from data.datasets.change_detection_datasets.bi_temporal.oscd_dataset import OSCDDataset
from data.datasets.change_detection_datasets.bi_temporal.sysu_cd_dataset import SYSU_CD_Dataset
from data.datasets.change_detection_datasets.single_temporal.i3pe_dataset import I3PEDataset
from data.transforms.compose import Compose
from data.transforms.randomize import Randomize
from data.transforms.vision_2d.crop.random_crop import RandomCrop
from data.transforms.vision_2d.flip import Flip
from data.transforms.vision_2d.random_rotation import RandomRotation
from metrics.vision_2d.semantic_segmentation_metric import SemanticSegmentationMetric
from models.change_detection.i3pe.i3pe_model import I3PEModel
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.multi_val_dataset_trainer import MultiValDatasetTrainer


config = {
    'runner': MultiValDatasetTrainer,
    'work_dir': './logs/benchmarks/change_detection/i3pe/sysu_cd_run_2',
    'epochs': 100,
    'init_seed': 69055869,
    'train_seeds': [36921033, 5903639, 43436836, 85660065, 3195613, 62889732, 9523687, 72958942, 63979574, 96441638, 16128993, 40136901, 40519446, 87519407, 27634932, 2583214, 15611092, 96609128, 3670999, 82872799, 27585874, 64886919, 62031272, 32223145, 90059801, 19624549, 27925506, 97591065, 99631508, 98941342, 90300549, 16073420, 34067251, 46659230, 69800129, 63648429, 63032544, 49159134, 72483703, 60006973, 32344933, 21703564, 62246889, 31028826, 21372323, 26725850, 37943485, 10848932, 75200792, 9905857, 87133291, 94167069, 51895667, 96315042, 39974872, 40696424, 79097679, 42841803, 37602340, 21424925, 24721137, 77343700, 80187293, 59119133, 60043918, 24937834, 51026201, 83008656, 44128898, 51400392, 62189522, 43076570, 42932057, 87049778, 78566810, 93521811, 6884048, 58234968, 85063139, 7925181, 23216155, 22814951, 27220493, 85945763, 21726574, 11500350, 24863745, 3727642, 50584110, 26217466, 64756812, 69540561, 46832636, 44287967, 12332713, 48585387, 75375609, 73956883, 95607140, 76480350],
    'val_seeds': [68421097, 28699233, 83199714, 62750401, 23097432, 85498332, 81166741, 10263176, 9257649, 40030725, 58658272, 79331455, 20650152, 36925253, 56374591, 1610514, 5083278, 4769164, 3411383, 18856459, 39036046, 31991074, 89941118, 93801294, 60563714, 10722910, 55453629, 44271276, 13944153, 84321889, 9994075, 65466855, 84530133, 14890304, 46064031, 84780467, 40734015, 81862381, 24108192, 39751975, 2050583, 10434353, 19077051, 47149898, 32529916, 93981799, 4314266, 75544173, 75093493, 44525736, 12877532, 6445068, 91650714, 15160047, 17530990, 30666896, 48241775, 87312476, 64728734, 86035470, 25744474, 55039530, 31538978, 63688293, 37553103, 15666667, 21698309, 39323587, 29104464, 36685172, 91567083, 9841584, 28665576, 81278798, 52735790, 51809153, 27351274, 66130588, 43378029, 27519703, 31795448, 43983573, 41311921, 41432739, 61645146, 21247818, 1357701, 37734726, 76846557, 43196207, 24964615, 89678755, 52999390, 35710418, 98305999, 49156435, 56297969, 78590999, 19116686, 68113837],
    'test_seed': 27786159,
    'train_dataset': {
        'class': I3PEDataset,
        'args': {
            'source': <data.datasets.change_detection_datasets.single_temporal.bi2single_temporal_dataset.Bi2SingleTemporal object at 0x7fe8fd45dd50>,
            'dataset_size': 24000,
            'exchange_ratio': 0.75,
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 128,
            'num_workers': 8,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {},
                },
            },
        },
    },
    'criterion': {
        'class': SymmetricChangeDetectionCriterion,
        'args': {
            'class_weights': (0.4268217980861664, 1.5731782913208008),
        },
    },
    'val_dataset': None,
    'val_dataloader': None,
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': SemanticSegmentationMetric,
        'args': {
            'num_classes': 2,
        },
    },
    'model': {
        'class': I3PEModel,
        'args': {},
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': SGD,
                'args': {
                    'lr': 0.001,
                    'momentum': 0.9,
                    'weight_decay': 0.0001,
                },
            },
        },
    },
    'scheduler': {
        'class': PolynomialLR,
        'args': {
            'optimizer': None,
            'total_iters': None,
            'power': 0.9,
        },
    },
    'val_datasets': [{
    'class': AirChangeDataset,
    'args': {
        'data_root': './data/datasets/soft_links/AirChange',
        'split': 'test',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (112, 112),
                'resize': (224, 224),
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': CDDDataset,
    'args': {
        'data_root': './data/datasets/soft_links/CDD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': LevirCdDataset,
    'args': {
        'data_root': './data/datasets/soft_links/LEVIR-CD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': OSCDDataset,
    'args': {
        'data_root': './data/datasets/soft_links/OSCD',
        'split': 'test',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
        'bands': None,
    },
}, {
    'class': SYSU_CD_Dataset,
    'args': {
        'data_root': './data/datasets/soft_links/SYSU-CD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}],
    'val_dataloaders': [{
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_size': Tensor,
                        'crop_loc': Tensor,
                        'crop_size': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_resolution': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_resolution': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'date_1': list,
                        'date_2': list,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {},
            },
        },
    },
}],
}
