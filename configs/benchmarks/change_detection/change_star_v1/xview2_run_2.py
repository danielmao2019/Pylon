# This file is automatically generated by `./configs/benchmarks/change_detection/gen_change_star_v1.py`.
# Please do not attempt to modify manually.
from builtins import list
from configs.common.models.change_detection.change_star import Resnet50WithFPN
from torch import Tensor
from torch.optim.lr_scheduler import PolynomialLR
from torch.optim.sgd import SGD
from torch.utils.data.dataloader import DataLoader
from torchvision.transforms.transforms import ColorJitter
from criteria.vision_2d.change_detection.change_star_criterion import ChangeStarCriterion
from data.collators.base_collator import BaseCollator
from data.collators.change_star_collator import ChangeStarCollator
from data.datasets.change_detection_datasets.bi_temporal.air_change_dataset import AirChangeDataset
from data.datasets.change_detection_datasets.bi_temporal.cdd_dataset import CDDDataset
from data.datasets.change_detection_datasets.bi_temporal.levir_cd_dataset import LevirCdDataset
from data.datasets.change_detection_datasets.bi_temporal.oscd_dataset import OSCDDataset
from data.datasets.change_detection_datasets.bi_temporal.sysu_cd_dataset import SYSU_CD_Dataset
from data.datasets.change_detection_datasets.bi_temporal.xview2_dataset import xView2Dataset
from data.transforms.compose import Compose
from data.transforms.randomize import Randomize
from data.transforms.vision_2d.crop.random_crop import RandomCrop
from data.transforms.vision_2d.flip import Flip
from data.transforms.vision_2d.random_rotation import RandomRotation
from metrics.vision_2d.change_detection.change_star_metric import ChangeStarMetric
from models.change_detection.change_star.change_star import ChangeStar
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.multi_val_dataset_trainer import MultiValDatasetTrainer


config = {
    'runner': MultiValDatasetTrainer,
    'work_dir': './logs/benchmarks/change_detection/change_star_v1/xview2_run_2',
    'epochs': 100,
    'init_seed': 62386107,
    'train_seeds': [5942363, 37821965, 56968035, 37143143, 25262548, 80271135, 27451340, 41952148, 12933750, 26155114, 81402530, 50257901, 37549780, 14345908, 15055938, 28962268, 48753123, 39442268, 68908782, 96320545, 76681705, 68051539, 38706797, 68560642, 94362280, 85793751, 76674643, 30934875, 11970039, 45253177, 91755982, 38853528, 97856637, 41127101, 2081960, 11233172, 63529102, 91601723, 13225323, 44921184, 39213293, 42820367, 40196454, 42953696, 36918445, 31564880, 61051272, 37309740, 93618303, 7895062, 19259082, 87051339, 68607622, 10603708, 32732082, 30506634, 22340067, 16104140, 77991793, 44634744, 44671932, 89006951, 71904502, 54930883, 8187944, 9395815, 85326541, 9049768, 86830599, 9996374, 40526875, 27952013, 60113697, 67995549, 82802586, 80025488, 94350197, 52602785, 88497745, 4088816, 21859713, 95923105, 20152235, 4290160, 53407102, 14089598, 83109667, 48885637, 99814361, 39314747, 72873536, 97288172, 2387934, 70446391, 66762292, 66044362, 68379156, 45549951, 31112363, 87978413],
    'val_seeds': [70341157, 28624924, 57286506, 87813508, 27815553, 3497762, 71794261, 63380631, 92006593, 67728227, 70798153, 97913719, 41449280, 60291602, 16185541, 96038426, 62812212, 67284008, 51017702, 51067409, 32372672, 6777814, 10155176, 32354560, 18470880, 91908743, 66081049, 21439441, 22611897, 36852407, 84833812, 2712751, 77954859, 61829945, 36732456, 33143018, 35641278, 59049773, 16546511, 69066639, 93498431, 64263913, 11570090, 79952088, 63841908, 88629127, 80978567, 79861890, 37263115, 86883881, 41703020, 11018034, 79063724, 64748670, 15374146, 30567526, 95039333, 45344763, 94348987, 30912873, 53819063, 5763766, 3236190, 35218580, 4410402, 86923082, 71411986, 92302119, 61224598, 33178630, 80131593, 52578529, 91230240, 54194210, 36279584, 50653599, 3994433, 62487899, 45641210, 20755060, 58438461, 30960132, 19636646, 26292098, 40104315, 64699517, 45747623, 39956860, 96212736, 84779881, 87208805, 58433416, 52788561, 85878852, 35300730, 81905908, 70764526, 7272905, 61005982, 11496597],
    'test_seed': 67377444,
    'train_dataset': {
        'class': xView2Dataset,
        'args': {
            'data_root': './data/datasets/soft_links/xView2',
            'split': 'train',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'lbl_1'), ('labels', 'lbl_2')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'lbl_1'), ('labels', 'lbl_2')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'lbl_1'), ('labels', 'lbl_2')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'lbl_1'), ('labels', 'lbl_2')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': ColorJitter,
                    'args': {
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 4,
            'num_workers': 4,
            'collate_fn': {
                'class': ChangeStarCollator,
                'args': {
                    'method': 'train',
                },
            },
        },
    },
    'criterion': {
        'class': ChangeStarCriterion,
        'args': {},
    },
    'val_dataset': None,
    'val_dataloader': None,
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': ChangeStarMetric,
        'args': {},
    },
    'model': {
        'class': ChangeStar,
        'args': {
            'encoder': {
                'class': Resnet50WithFPN,
                'args': {},
            },
            'change_decoder_cfg': {
                'in_channels': 512,
                'mid_channels': 16,
                'out_channels': 2,
                'drop_rate': 0.2,
                'scale_factor': 4.0,
                'num_convs': 4,
            },
            'semantic_decoder_cfg': {
                'in_channels': 256,
                'out_channels': 5,
                'scale_factor': 4.0,
            },
        },
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': SGD,
                'args': {
                    'lr': 0.001,
                    'momentum': 0.9,
                    'weight_decay': 0.0001,
                },
            },
        },
    },
    'scheduler': {
        'class': PolynomialLR,
        'args': {
            'optimizer': None,
            'total_iters': None,
            'power': 0.9,
        },
    },
    'val_datasets': [{
    'class': xView2Dataset,
    'args': {
        'data_root': './data/datasets/soft_links/xView2',
        'split': 'test',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'lbl_1'), ('labels', 'lbl_2')]
)],
            },
        },
    },
}, {
    'class': AirChangeDataset,
    'args': {
        'data_root': './data/datasets/soft_links/AirChange',
        'split': 'test',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (112, 112),
                'resize': (224, 224),
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': CDDDataset,
    'args': {
        'data_root': './data/datasets/soft_links/CDD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': LevirCdDataset,
    'args': {
        'data_root': './data/datasets/soft_links/LEVIR-CD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}, {
    'class': OSCDDataset,
    'args': {
        'data_root': './data/datasets/soft_links/OSCD',
        'split': 'test',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
        'bands': None,
    },
}, {
    'class': SYSU_CD_Dataset,
    'args': {
        'data_root': './data/datasets/soft_links/SYSU-CD',
        'split': 'val',
        'transforms_cfg': {
            'class': Compose,
            'args': {
                'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (224, 224),
                'resize': None,
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
)],
            },
        },
    },
}],
    'val_dataloaders': [{
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': ChangeStarCollator,
            'args': {
                'method': 'eval',
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_size': Tensor,
                        'crop_loc': Tensor,
                        'crop_size': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_resolution': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'image_resolution': Tensor,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {
                    'meta_info': {
                        'date_1': list,
                        'date_2': list,
                    },
                },
            },
        },
    },
}, {
    'class': DataLoader,
    'args': {
        'batch_size': 1,
        'num_workers': 4,
        'collate_fn': {
            'class': BaseCollator,
            'args': {
                'collators': {},
            },
        },
    },
}],
}
