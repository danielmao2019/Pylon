# This file is automatically generated by `./configs/benchmarks/change_detection/gen_bi_temporal.py`.
# Please do not attempt to modify manually.
from torch import Tensor
from torch.optim.lr_scheduler import PolynomialLR
from torch.optim.sgd import SGD
from torch.utils.data.dataloader import DataLoader
from torchvision.transforms.transforms import ColorJitter
from criteria.vision_2d.dense_prediction.dense_classification.semantic_segmentation import SemanticSegmentationCriterion
from criteria.wrappers.auxiliary_outputs_criterion import AuxiliaryOutputsCriterion
from data.collators.base_collator import BaseCollator
from data.datasets.change_detection_datasets.bi_temporal.air_change_dataset import AirChangeDataset
from data.transforms.compose import Compose
from data.transforms.randomize import Randomize
from data.transforms.torchvision_wrapper import TorchvisionWrapper
from data.transforms.vision_2d.crop.random_crop import RandomCrop
from data.transforms.vision_2d.flip import Flip
from data.transforms.vision_2d.random_rotation import RandomRotation
from data.transforms.vision_2d.resize.maps import ResizeMaps
from metrics.vision_2d.semantic_segmentation_metric import SemanticSegmentationMetric
from models.change_detection.change_former.models.change_former_v4 import ChangeFormerV4
from optimizers.single_task_optimizer import SingleTaskOptimizer
from runners.supervised_single_task_trainer import SupervisedSingleTaskTrainer


config = {
    'runner': SupervisedSingleTaskTrainer,
    'work_dir': './logs/benchmarks/change_detection/air_change/ChangeFormerV4_run_1',
    'epochs': 100,
    'init_seed': 57708735,
    'train_seeds': [36147001, 39513331, 88254492, 40058017, 53075999, 94887770, 56186111, 31881670, 82163575, 37425902, 54662483, 37086735, 42583559, 18233668, 83871253, 30090677, 93167798, 9161731, 64993960, 47157831, 54684818, 9918468, 57237747, 58664669, 17732587, 56139180, 45797660, 36844969, 2994390, 25237880, 34057321, 49341618, 94997101, 35022470, 45336764, 28263073, 46881425, 19982575, 52255256, 75624401, 81842993, 18254823, 93158223, 618448, 91351595, 30432965, 82735881, 25199054, 17064440, 45793522, 79642177, 61451969, 58628213, 21279909, 98108718, 28434263, 31710554, 78599447, 3742691, 97822881, 1209179, 67398422, 10300509, 52178208, 54577056, 76504867, 11463966, 45186115, 86420076, 64498058, 41368912, 91108050, 50164281, 1075751, 97165893, 51678407, 6712872, 64094736, 9874127, 12725994, 44646232, 45530288, 49724943, 55136872, 71673939, 84229408, 20520976, 39304619, 2643570, 90311791, 25245689, 15484088, 11401330, 36219127, 34962866, 14427401, 75470494, 42931787, 19960457, 35478957],
    'val_seeds': [96433652, 36055486, 65493092, 71689210, 34806676, 23009734, 55328747, 46393745, 67945009, 47411906, 49064677, 81736900, 53845410, 33959918, 4024005, 80113880, 75147833, 44605681, 4059649, 58947130, 8252813, 59522484, 77332615, 64445742, 33756595, 90935172, 83894251, 19369984, 5546821, 56908471, 54302712, 56671483, 56416686, 20774964, 52085616, 39463494, 82056966, 88004604, 19595069, 80868421, 44817520, 61938178, 69207918, 27525709, 80933328, 91338218, 19554617, 24668498, 37148853, 44723894, 52766993, 55093178, 8199595, 83782546, 7620385, 74193680, 26293773, 56430756, 18052647, 22558804, 24044031, 12634298, 82421793, 89828555, 65386787, 49031513, 2577206, 47009425, 25612981, 17401958, 41475115, 32199379, 29916371, 59050143, 60990458, 74750947, 46501800, 71531686, 11385809, 47750217, 85936470, 94420363, 70121858, 39020278, 20206176, 18134975, 69885218, 3815533, 71852332, 57720408, 77535326, 23315909, 46224929, 23253071, 8773150, 73713193, 9676851, 92773284, 96637591, 3181494],
    'test_seed': 82144407,
    'train_dataset': {
        'class': AirChangeDataset,
        'args': {
            'data_root': './data/datasets/soft_links/AirChange',
            'split': 'train',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': ResizeMaps,
            'args': {
                'size': (256, 256),
                'interpolation': None,
                'antialias': True,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': TorchvisionWrapper,
                    'args': {
                        'transform_class': ColorJitter,
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': TorchvisionWrapper,
                    'args': {
                        'transform_class': ColorJitter,
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
        },
    },
    'train_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 4,
            'num_workers': 4,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {
                        'meta_info': {
                            'image_size': Tensor,
                            'crop_loc': Tensor,
                            'crop_size': Tensor,
                        },
                    },
                },
            },
        },
    },
    'criterion': {
        'class': AuxiliaryOutputsCriterion,
        'args': {
            'criterion_cfg': {
                'class': SemanticSegmentationCriterion,
                'args': {
                    'class_weights': (0.09632044285535812, 1.9036794900894165),
                    'use_buffer': False,
                },
            },
            'reduction': 'mean',
        },
    },
    'val_dataset': {
        'class': AirChangeDataset,
        'args': {
            'data_root': './data/datasets/soft_links/AirChange',
            'split': 'test',
            'transforms_cfg': {
                'class': Compose,
                'args': {
                    'transforms': [(
    {
            'class': RandomCrop,
            'args': {
                'size': (112, 112),
                'resize': (256, 256),
                'interpolation': None,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': RandomRotation,
            'args': {
                'choices': [0, 90, 180, 270],
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -1,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': Flip,
                    'args': {
                        'axis': -2,
                    },
                },
                'p': 0.5,
            },
        },
    [('inputs', 'img_1'), ('inputs', 'img_2'), ('labels', 'change_map')]
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': TorchvisionWrapper,
                    'args': {
                        'transform_class': ColorJitter,
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_1')
), (
    {
            'class': Randomize,
            'args': {
                'transform': {
                    'class': TorchvisionWrapper,
                    'args': {
                        'transform_class': ColorJitter,
                        'brightness': 0.5,
                        'contrast': 0.5,
                        'saturation': 0.5,
                    },
                },
                'p': 0.5,
            },
        },
    ('inputs', 'img_2')
)],
                },
            },
        },
    },
    'val_dataloader': {
        'class': DataLoader,
        'args': {
            'batch_size': 1,
            'num_workers': 4,
            'collate_fn': {
                'class': BaseCollator,
                'args': {
                    'collators': {
                        'meta_info': {
                            'image_size': Tensor,
                            'crop_loc': Tensor,
                            'crop_size': Tensor,
                        },
                    },
                },
            },
        },
    },
    'test_dataset': None,
    'test_dataloader': None,
    'metric': {
        'class': SemanticSegmentationMetric,
        'args': {
            'num_classes': 2,
        },
    },
    'model': {
        'class': ChangeFormerV4,
        'args': {},
    },
    'optimizer': {
        'class': SingleTaskOptimizer,
        'args': {
            'optimizer_config': {
                'class': SGD,
                'args': {
                    'lr': 0.001,
                    'momentum': 0.9,
                    'weight_decay': 0.0001,
                },
            },
        },
    },
    'scheduler': {
        'class': PolynomialLR,
        'args': {
            'optimizer': None,
            'total_iters': None,
            'power': 0.9,
        },
    },
}
