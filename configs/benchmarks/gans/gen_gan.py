from typing import List
import os
import sys
sys.path.append("../../..")
import utils
os.chdir("../../..")


def add_heading(config: str) -> str:
    heading = ""
    heading += "# This file is automatically generated by `./configs/benchmarks/change_detection/gen_gan.py`.\n"
    heading += "# Please do not attempt to modify manually.\n"
    config = heading + config
    return config


def main() -> None:
    with open(f"./configs/common/template.py", mode='r') as f:
        config = f.read() + '\n'
    config = add_heading(config)
    # add runner
    config += f"from runners.gan_trainers import GANTrainer\n"
    config += f"config['runner'] = GANTrainer\n"
    config += '\n'
    # add dataset config
    config += f"# dataset config\n"
    config += f"from configs.common.datasets.gans.mnist import config as dataset_config\n" 
    config += f"config.update(dataset_config)\n"
    config += '\n'
    # add model config
    config += f"# model config\n"
    config += f"from configs.common.models.gans.gan import model_config\n"
    config += f"config['model'] = model_config\n"
    config += '\n'
    # add optimizer config
    config += f"# optimizer config\n"
    config += f"from configs.common.optimizers.gans.gan import optimizer_config\n"
    config += f"config['optimizer'] = optimizer_config\n"
    config += '\n'
    # add scheduler config
    config += f"# scheduler config\n"
    config += f"""config['scheduler'] = {{
    'class': schedulers.wrappers.MultiPartScheduler,
    'args': {{
        'scheduler_cfgs': {{
            'generator': {{
                'class': torch.optim.lr_scheduler.LambdaLR,
                'args': {{
                    'lr_lambda': {{
                        'class': schedulers.ConstantLambda,
                        'args': {{}},
                    }},
                }},
            }},
            'discriminator': {{
                'class': torch.optim.lr_scheduler.LambdaLR,
                'args': {{
                    'lr_lambda': {{
                        'class': schedulers.ConstantLambda,
                        'args': {{}},
                    }},
                }},
            }},
        }},
    }},
}}\n"""
    config += '\n'
    # add seeds
    relpath = os.path.join("benchmarks", "gans", "gan")
    seeded_configs: List[str] = utils.configs.generate_seeds(
        template_config=config, base_seed=relpath,
    )
    # save to disk
    os.makedirs(os.path.join("./configs", relpath), exist_ok=True)
    for idx, seeded_config in enumerate(seeded_configs):
        seeded_config += f"# work dir\n"
        seeded_config += f"config['work_dir'] = \"" + os.path.join("./logs", relpath, f"gan_run_{idx}") + "\"\n"
        with open(os.path.join("./configs", relpath, f"gan_run_{idx}.py"), mode='w') as f:
            f.write(seeded_config)


if __name__ == "__main__":
    main()
